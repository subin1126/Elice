1. Redux
 - Reducer에서는 상태를 변경하면 안된다
 - Dispatch로 액션을 Reducer에 보낸다
 - Immutability는 상태를 오로지 읽을 수만 있다는 의미이다
   변경을 만들려면 dispatch를 통해 변경해야 한다
 - Reducer에서는 상태를 변경하면 안되고, 새로운 상태를 리턴해야만 한다
 - dispatch는 액션 객체를 Middleware를 통해 Reducer로 보낸다

2. Redux의 구조
 - Enhancer는 전체 State를 대상으로 하여 redux의 동작을 확장한다
 - Middleware는 action object가 Reducer에 진입하기 이전에 동작한다
 - redux-devtools같이, Enhancer는 전체 state의 상태를 중심으로 redux 동작을 확장한다
 - redux-thunk는 Middleware의 예로, action object가 Promise를 리턴하는지 체크한다

3. redux-toolkit
 - createAction으로 생성한 Action Creator는 액션의 타입 스트링으로 사용할 수 있다
 - createReducer는 내부적으로 immerjs를 사용하므로,
   mutable code 위주로 직접 상태를 변경하는 코드를 작성할 수 있다
 - createSlice에서 reducers를 정의하면, 각 Reducer 함수의 이름 자체가 Action Creator가 된다

4. Redux를 React에 연결하기
 - react-redux 라이브러리 없이는 Redux State가 변경되더라도 React는 상태 변경을 알 수 없다
 - Provider의 Children으로 앱을 렌더링하지 않으면 앱에서 store에 접근할 수 없다
 - dispatch 함수에 action object를 넘겨 상태 변경을 만든다

5. Redux를 이용한 비동기 처리
 - 비동기 처리를 자체 내장하지 않고, redux-thunk 같은 외부 익스텐션이 필요하다
 - pending, fulfilled, rejected 3가지 상태를 처리할 수 있다
 - dispatch 함수는 Promise를 반환하며, 반환된 Promise를 토대로, 복합적인 비동기 처리를 할 수 있다

6. Redux를 써야하는 경우
 - 복잡한 비동기 처리가 있는 상태관리가 필요할 때
 - 앱의 상태가 복잡하고, 이를 체계적으로 관리하고 싶을 때
 - 상태 관리 패턴을 도입하여, 여러 개발자와 협업하고 싶을 때
 - logger, devtool 등을 활용하여 상태를 관리할 필요가 있을 때

7. Redux 용어
 - Action : 상태의 변경을 나타내는 개념
 - Action Creator : Action을 생성하는 함수
 - Dispatch : Action을 redux로 보내는 함수
 - Selector : 특정 state 조각을 store로부터 가져오는 함수

8. 