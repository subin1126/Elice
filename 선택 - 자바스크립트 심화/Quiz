실행 컨텍스트
앞선 학습을 통해서 실행 컨텍스트가 전역에서 시작해 함수가 호출될 때 스택에 쌓인다는 것을 배웠습니다.
조금 더 핵심적으로 짚어본다면 1) 전역에 존재하는 코드, 2) 함수에 존재하는 코드를 잘 구별해야합니다.

전역에 존재하는 코드는 함수나 클래스 내부의 코드를 무시하고 컨텍스트를 가집니다.
함수에 존재하는 코드는 함수 내부에서만 컨텍스트를 가집니다.

그리고 호출되는 순서에 따라 스택에 쌓이고, 나중에 쌓여진 함수부터 실행됩니다.

렉시컬 환경
어려운 말처럼 보이지만, 렉시컬 환경은 식별자와 식별자에 연결된 값을 저장하는 자료구조입니다.
다음 예시를 살펴봅시다.

const myName = "Elice";

function Coder() {
  const title = "Coder Land";
  return title;
}
전역으로 생성되는 렉시컬 환경에서는 myName, Coder 이렇게 2개의 식별자와 식별자에 연결된 값이 저장됩니다.
myName에는 Elice가 들어있지만, Coder에는 스코프 체인으로 Coder와 연결되어 있습니다. 스코프 체인은 스코프가 연결된 구조를 말합니다.
그리고 Coder 함수의 렉시컬 환경에서는 title이라는 1개의 식별자와 식별자에 연결된 값이 저장됩니다.
또한, 전역 렉시컬 환경에 스코프 체인으로 연결되어 있습니다. 전역에서는 Coder라는 정보를 갖고 있기 때문입니다.


---------------------------------------------------------

This에 대한 활용 예시
This는 호출되는 방식에 따라서 바인딩 대상이 달라집니다.
바인딩이라는 단어가 어렵다면 가리키는 객체라고 생각해보세요.



함수에서 사용되는 This
기본적으로 전역 컨텍스트에서 this는 window를 가리킵니다.
따라서 전역 렉시컬 환경에 있는 name도 접근할 수 있습니다.

const name = "elice";
console.log(this); // window {...}
일반 함수 호출에서도 this는 window를 가리킵니다.
따라서 myFunc 함수 내부에 있는 name에 접근 할 수 없습니다.

function myFunc() {
  const name = "elice";
  console.log(this);
}

myFunc(); // 일반 함수 호출시 window {...}
생성자 함수 호출
생성자 함수 내부의 this는 new 키워드를 통해 앞으로 만들어질 인스턴스 객체를 가리킵니다.

생성자 함수는 함수 이름으로 된 객체를 만들어줍니다.
반환해야할 것들은 this 즉, 생성될 시점의 컨텍스트에 저장되고 자동으로 return 되기 때문에
명시적으로 써줄 필요가 없습니다. 따라서 다른 값을 return 하면 객체가 만들어지지 않습니다.

function myFunc(name) {
  this.name = name;
  this.getName = function () {
    console.log("getName this:", this);
    return this.name;
  };

  console.log("myFunc this:", this);
  // return this; 생략 가능합니다.
}

const o = new myFunc("elice"); // myFunc this: myFunc {...}
o.getName() // myFunc this: myFunc {...}
결과적으로 일반적으로 함수를 호출할 때는 this가 모두 window를 가리킵니다.
함수를 객체로 생성하는 방법에만 this가 생성하는 함수 내부를 가리킵니다.




객체에서 사용되는 this
객체에서의 this는 메소드를 호출한 객체를 가리킵니다.

const o = {
  name: "elice",
  myFunc: function () {
    console.log(this);
  },
};

o.myFunc(); // {name: 'elice', myFunc: ƒ}
하지만 객체 안 함수의 내부 함수에 This는 동적바인딩으로 인해 전역 객체를 가리킵니다.

const o = {
  name: "elice",
  myFunc: function () {
    return function () { console.log(this) }
  },
};

o.myFunc()(); // window {...}



This 고정하기
1. 화살표 함수로 고정하기
생생자 함수로 만든 객체, 객체 리터럴 방식으로 만든 객체 모두 내부에서 this가 자기 자신을 가리키고 있습니다. 하지만 두 경우 모두 내부에서 함수를 만들고 해당 함수에서 this를 출력하면 window를 가리킵니다. 다음 코드를 살펴봅시다.

/* 생성자 함수 방식 */
function createObject() {
  this.myFunc = function () {
    console.log("myFunc this:", this);
    return function () { console.log("myFunc return this:", this) };
  };
}

const o = new createObject();
o.myFunc()(); 
// myFunc        this: createObject {...}
// myFunc return this: window {...}

/* 객체 리터럴 방식 */
const o = {
  myFunc: function () {
    console.log("myFunc this:", this)
    return function () { console.log("myFunc return this:", this) }
  },
};

o.myFunc()();
// myFunc        this: myFunc {...}
// myFunc return this: window {...}
객체의 최상위 스코프에서의 함수 본문 this는 객체 최상위 스코프를 정상적으로 가리킵니다.
하지만 함수 안에 또다시 함수가 리턴되는 경우에는 window 객체를 가리킵니다.
다음과 같이 화살표 함수를 사용하면 객체 최상위 스코프를 가리키도록 유지합니다.

/* 생성자 함수 방식 */
function createObject() {
  this.myFunc = function () {
    console.log("myFunc this:", this);
    // 다음 부분을 화살표 함수로 변경
    return () => { console.log("myFunc return this:", this) };
  };
}

const o = new createObject();
o.myFunc()(); 
// myFunc        this: createObject {...}
// myFunc return this: createObject {...}

/* 객체 리터럴 방식 */
const o = {
  myFunc: function () {
    console.log("myFunc this:", this)
    // 다음 부분을 화살표 함수로 변경
    return () => { console.log("myFunc return this:", this) };
  },
};

o.myFunc()();
// myFunc        this: myFunc {...}
// myFunc return this: myFunc {...}
2. call, apply, bind 메서드로 고정하기
앞선 상황과 동일한 코드를 가지고 원하는 객체를 가리키도록 해보겠습니다.

bind 메서드
/* 생성자 함수 방식 */
function createObject() {
  this.myFunc = function () {
    console.log("myFunc this:", this);
    return function () { console.log("myFunc return this:", this) };
  };
}

const o = new createObject();
o.myFunc().bind(o)(); // bind 메서드를 사용해 o객체로 고정시킵니다.
// myFunc        this: createObject {...}
// myFunc return this: createObject {...}

/* 객체 리터럴 방식 */
const o = {
  myFunc: function () {
    console.log("myFunc this:", this)
    return function () { console.log("myFunc return this:", this) }
  },
};

o.myFunc().bind(o)(); // bind 메서드를 사용해 o객체로 고정 그리고 함수를 실행
// myFunc        this: myFunc {...}
// myFunc return this: myFunc {...}

2. apply, call 메서드
두 메서드에 차이는 call 메서드는 인수 목록을 받고, apply 메서드는 인수 배열을 하나 받습니다.

ex) call(this, var1, var2, var3, …) / apply(this, [ el, el2, el3, … ])

/* 생성자 함수 방식 */
function createObject() {
  this.myFunc = function () {
    console.log("myFunc this:", this);
    return function () { console.log("myFunc return this:", this) };
  };
}

const o = new createObject();
o.myFunc().call(o, null);  // call  메서드를 사용해 o객체로 고정시킨 후 함수 실행
// myFunc        this: createObject {...}
// myFunc return this: createObject {...}
o.myFunc().apply(o, null); // apply 메서드를 사용해 o객체로 고정시킨 후 함수 실행
// myFunc        this: createObject {...}
// myFunc return this: createObject {...}

/* 객체 리터럴 방식 */
const o = {
  myFunc: function () {
    console.log("myFunc this:", this)
    return function () { console.log("myFunc return this:", this) }
  },
};

o.myFunc().call(o, null);  // call  메서드를 사용해 o객체로 고정시킨 후 함수 실행
// myFunc        this: myFunc {...}
// myFunc return this: myFunc {...}
o.myFunc().apply(o, null); // apply 메서드를 사용해 o객체로 고정시킨 후 함수 실행
// myFunc        this: myFunc {...}
// myFunc return this: myFunc {...}
call, apply, bind는 일반 함수 호출에도 원하는 객체를 가리킬 수 있습니다.

const o = {
    name: "Elice",
}

function myFunc() {
  console.log(this);
}

myFunc()              // window {...}
myFunc.bind(o)()      // {name: 'Elice'}
myFunc.call(o, null)  // {name: 'Elice'}
myFunc.apply(o, null) // {name: 'Elice'}


---------------------------------------------------


함수의 일급 객체 성질에 대한 것
*함수를 다른 함수의 인자로 넘기면, 다른 함수 내부에서 그 함수를 호출할 수 있다
 => 함수를 인자로 받아 자유롭게 활용할 수 있다
    인자로 받은 함수는 또한 다른 함수를 인자로 받을 수 있다
*함수 안에 함수를 선언했을 때 그 함수를 외부에서 쓰고 싶다면,
 그 함수를 리턴하여 사용할 수 있다
*함수의 실행이 끝나도 내부 변수를 유지할 수 있다
 => 함수 안에서 closure가 만들어지면, 내부 변수가 메모리에 남아 closure에 활용된다


this가 가리키는 것
- 함수의 호출 환경에 따라 함수 내 this가 가리키는 것이 결정된다
- bind, apply, call 메서드는 함수의 this를 바꿀 수 있다
- 콜백 함수는 다른 함수의 인자로 보내지는 함수이다
- setTimeout 함수의 인자로 콜백 함수를 보내면 특정 시간 이후에 해당 함수는 실행된다. 특정 객체의 메서드라 하더라도, 실행될 때 함수가 실행되는 환경은 바뀌게 된다. 미리 바인딩 된 this가 없을 경우 this는 함수를 둘러싼 환경을 가리키도록 바뀐다


----------------------------------------------------

Closure를 왜 사용하나요?
클로저를 사용하는 이유는 상태를 안전하게 은닉하고 보존시키기 위함입니다.
그리고 이를 수정하는 방법은 특정 함수한테만 그 권한을 줍니다.

즉, 다수의 개발자와 함께 일을 할 때 실수를 방지하고 더 탄탄한 코드를 만들기위한 코드 패턴입니다.
따라서 다음과 같이 클로저를 만들어 사용합니다.

function createCard() {
    let title= "";
    let content= "";
    
    function changeTitle(text) {
      title= text
    }
    
    function changeContent(text) {
      content= text
    }
    
    function print() {
      console.log("TITLE -", title);
      console.log("CONTENT -", content);
    } 

    return { changeTitle, changeContent, print};
}
createCard 함수 본문에 있는 title, content 변수는 외부에서 접근할 수 없습니다.
따라서 changeTitle, changeContent 함수를 통해 수정할 수 있도록 해주었습니다.
값을 읽을 수 있도록 제공하는 함수는 print로 해주었습니다.

그리고 이 모든 함수를 객체로 묶어서 createCard 함수에서 return 합니다.
const myCard = createCard()와 같은 형태로 인스턴스를 만들어서 사용할 수 있습니다.


--------------------------------------------------------

배열의 경우, 인자가 하나도 없더라도 rest operator는 빈 배열을 반환한다
객체의 경우, rest operator로 묶을 때 필요한 변수를 제외할 수 있다
함수의 인자의 경우, rest operator을 이용해 가변 인자 함수를 구현할 수 있다



자바스크립트 Spread Operator
- 배열은 iterable 성질을 가진 객체이므로, 객체에 spread operator로 합쳐도 에러가 발생하지 않는다. 배열의 각 index에 있는 값을이 '0':1, '1':2 처럼 객체에 합쳐진다
- 객체의 필드들을 배열에 spread operator로 합치면 에러가 발생한다
 => 일반 객체는 iterable 성질이 없으므로, 배열 같은 iterable 객체에 합치려 하면 에러가 발생한다. 단, iterable을 지원하는 객체는 spread operator로 합칠 수 있다
- spread operaotr로 객체를 복사하면, 객체나 배열 필드의 경우 reference만 복사된다
 => 객체나 배열 필드는 단순히 reference만 복사된다. 따라서, deep copy를 위한 별도의 작업을 해주어야 한다


 ------------------------------------------------------

 유용한 배열 메서드
자바스크립트에서 자주 사용되는 배열 메서드에 대해서 알아봅니다.

Array.prototype.forEach()
forEach 메서드는 배열의 원소를 하나씩 순회하면서 callback 함수를 수행합니다.
return 값은 없으므로 undefined를 출력합니다.

forEach 함수의 매개변수에는 콜백함수가 들어오고,
콜백 함수의 매개변수에는 value와 index를 받습니다.
즉, 다음 예시에서는 배열 [1,2,3,4,5]에서 각 원소 하나씩은 순회하면서 value와 index를 받습니다.

const result = [1, 2, 3, 4, 5].forEach((value, index) => {
    console.log("index:", index, "value:", value);
});

/* 출력 
index: 0 value: 1
index: 1 value: 2
index: 2 value: 3
index: 3 value: 4
index: 4 value: 5
*/
console.log(result); // undefined
Array.prototype.map()
map 메서드도 forEach와 같이 배열의 원소를 하나씩 순회하면서 callback 함수를 수행합니다.
map 메서드는 첫번째 매개변수인 콜백함수 안에서 리턴한 원소들을 모아 map 메서드에서 리턴합니다.

const result = [1, 2, 3, 4, 5].map((value, index) => {
    console.log("index:", index, "value:", value);
    return value + 1;
});

/* 출력 
index: 0 value: 1
index: 1 value: 2
index: 2 value: 3
index: 3 value: 4
index: 4 value: 5
*/
console.log(result); // [2, 3, 4, 5, 6]
Array.prototype.filter()
filter 메서드는 주어진 배열의 원소 중 주어진 조건에 참인 값만 모아서 배열을 만듭니다.
filter 메서드 첫번째 매개변수인 콜백함수 안에서 return이 true인 value 값만 모아서 리턴합니다.

다음 예시는 순회를 확인하기 위해 value와 index를 확인하고, 3이상인 value만 배열로 만들어서 리턴합니다.

const result = [1, 2, 3, 4, 5].filter((value, index) => {
    console.log("index:", index, "value:", value);
    return value > 3; // 배열의 원소 중 3초과인 원소만 true로 만듭니다.
});

/* 출력 
index: 0 value: 1
index: 1 value: 2
index: 2 value: 3
index: 3 value: 4
index: 4 value: 5
*/
// 배열의 원소 중 3초과인 원소만 배열로 출력되었습니다.
console.log(result); // [4, 5] 
Array.prototype.every()
every 메서드는 배열의 원소를 주어진 조건에 따라 판별합니다.
every 메서드의 첫번째 매개변수인 콜백함수의 리턴 부분에 조건이 전부 true이면 every 메서드는 true를 리턴합니다.
만약 콜백함수의 리턴 부분이 전부 false이면 every 메서드는 false를 리턴합니다.

const result = [1, 2, 3, 4, 5].every((value, index) => {
    console.log("index:", index, "value:", value);
    return value > 0; // 주어진 배열의 원소가 모두 0보다 큰 지 검사합니다.
});

/* 출력 
index: 0 value: 1
index: 1 value: 2
index: 2 value: 3
index: 3 value: 4
index: 4 value: 5
*/
// 배열의 모든 원소가 0보다 크므로 true가 출력되었습니다.
console.log(result); // true
Array.prototype.reduce()
reduce 메서드는 이전 값을 기반으로 연산을 수행할 때 사용됩니다.

reduce 메서드의 첫번째 배개변수 콜백함수는 4개의 인자를 받습니다. (각 변수명은 자유롭게 지정할 수 있습니다.)
여기서 예시로 둔 sum에 해당하는 부분이 누적된 값
value는 순회중인 배열의 원소
index는 순회중인 배열 원소의 인덱스
arr는 원본 배열

reduce 메서드의 두번째 인자는 누적된 값의 초기값을 결정합니다.

따라서 다음 코드는 1~5까지의 누적된 합산값을 구합니다.

const result = [1, 2, 3, 4, 5].reduce((sum, value, index, arr) => {
    console.log("index:", index, "value:", value, "arr:", arr);
    return sum + value;
}, 0);

/* 출력
index: 0 value: 1 arr: [1, 2, 3, 4, 5]
index: 1 value: 2 arr: [1, 2, 3, 4, 5]
index: 2 value: 3 arr: [1, 2, 3, 4, 5]
index: 3 value: 4 arr: [1, 2, 3, 4, 5]
index: 4 value: 5 arr: [1, 2, 3, 4, 5]
*/
console.log(result); //15

-----------------------------------------------------

자바스크립트 변수 정의 과정
- 실행 컨텍스트 생성 단계에서, 자바스크립트 엔진은 변수 선언을 읽어 변수를 실행 컨텍스트에 저장한다
- 실행 컨텍스트 실행 단계에서, 자바스크립트 엔진은 변수 할당 구문을 읽어 실행 컨텍스트에 저장된 변수에 값을 저장한다
- 실행 컨텍스트 실행 단계에서, 자바스크립트 엔진이 변수명을 읽으면 렉시컬 환경에서 값을 읽는다
- 함수 선언문은 생성 단계에서 함수명과 함수 전체가 저장된다

전역 객체
- 자바스크립트 실행 환경에 따라, 전역 객체는 다르다
  브라우저의 경우 window, nodejs 환경의 경우 global로 각각 프로퍼티가 다른 객체이다
- globalThis는 환경의 전역 변수를 가리킨다. 따라서 window와 globablThis는 같은 객체를 가리킨다
- document 객체는 createElement함수오 DOM 노드를 생성할 수 있다


Number, NaN
- 문자열이 모두 숫자라면, Number(str)로 정상적으로 number 타입으로 변환할 수 있다
- isNaN() 함수는 입력값이 숫자로 변환되었을 때 NaN이 되는지를 검사한다
- 숫자에 Number 객체의 메서드를 적용하면, 숫자는 Number 객체로 변환된다


자바스크립트 Math 객체에 대한 설명
- Math.random()은 0과 1 사이의 숫자를 리턴한다
- BigInt 타입은 Math 객체를 이용한 연산이 불가능하다
  연산을 시도할 경우 TypeError가 발생한다
- Math 객체는 constructor가 없으므로, new 키워드를 이용하여 새로운 객체 생성 시 TypeError가 발생한다


Date 객체
- 문자열로 된 시간을 Date 객체로 변환하면, Date 객체가 생성된다
- new Date()로 Date 객체를 생성하면, 객체를 생성한 시점의 시간 정보만을 얻을 수 있다. 실시간으로 현재 시간의 밀리초를 얻기 위해선 정적 메서드인 Date.now()를 활용해야 한다
- Date 객체는 기본적으로 현재 컴퓨터의 시간대(타임존) 정보를 기반으로 생성된다. 따라서 Date 객체를 생성하면, 현재 시간대가 기준 UTC 시간대에서 얼마나 벗어나 있는지를 알 수 있다


자바스크립트 String, JSON 객체
- 문자열을 String으로 감싸지 않고도 문자열 메서드를 호출할 수 있다
 => 자바스크립트는 자동으로 문자열을 String 래퍼 객체로 변환하므로, 문자열 메서드를 문제없이 호출할 수 있따
- new를 이용해 생성하면 타입이 객체가 된다.String(10) 등 new를 사용하지 않으면 문자열 타입을 반환한다
- JSON.parse()를 이용해, 문자열을 넘겨 다시 객체로 만들 수 있다

============================================================

자바스크립트 제어 흐름
- 자바스크립트 엔진은 하나의 메인 스레드로 구성된다
=> 자바스크립트 엔진은 하나의 메인 스레드로 구성된다. 비동기 등을 처리하는 모듈은 여러 스레드로 구성될 수 있다
- 메인 스레드를 긴 시간 점유하면, 그동안 프로그램은 멈춘다
=> 메인 스레드는 브라우저 렌더링, 자바스크립트 실행 등의 작업을 하는 스레드이므로, 어떤 작업이 메인 스레드를 긴 시간 동안 점유하면, 작업이 실행되는 동안 프로그램은 멈추게된다. 따라서 긴 처리가 필요한 작업은 비동기로 실행하도록 로직을 구성하면 좋다
- 비동기적 제어 흐름의 경우, 현재 실행 중인 코드 외에 다른 작업이 실행될 수 있다
=> 자바스크립트 엔진은 코드를 실행하고 있지만, 비동기 처리에 의한 작업은 자바스크립트 엔진 외부에서 별도로 실행될 수 있다
- 비동기 작업이 실행되는 동안에도 메인 스레드는 코드를 실행하고 브라우저를 렌더링하게 된다



이벤트 루프
- 이벤트 루프는 자바스크립트 엔진 외부에 존재한다. nodejs 환경의 경우 libuv 라는 모듈에서 비동기 처리를 담당
- 이벤트 루프는 콜 스택이 비워질 때 태스크 큐에서 콜백함수를 꺼내 콜스택에 넣는다
 => 이벤트 루프는 콜 스택이 비워지는 것을 기다렸다가 태스크 큐에서 콜백 함수를 꺼낸다
- 비동기 처리가 끝나면, 태스크 큐에 콜백함수가 들어간다
 => setTimeout 등의 함수는 비동기 처리를 끝내면 태스크 큐에 콜백 함수를 넣는다. fetch, SMLHttpRequest 등의 API 또한 마찬가지이다
- 태스크 큐는 들어온 순서대로 콜백함수를 내보낸다
 => 이벤트 루프는 콜스택이 비워졌을 때, 태스크 큐에서 콜백 함수가 들어온 순서대로 함수를 내보낸다. 단, 큐는 여러 개가 존재하며 그 중 우선순위가 높은 큐(잡 큐 등)에서 나중에 들어온 콜백함수가 실행될 수 있다


 Promise
- Promise의 콜백은 잡 큐를 사용한다
Promise.prototype.then, Promise.prototype.catch에 보내지는 콜백함수는 잡 큐를 사용한다. 잡 큐의 경우 setTimeout() 등의 API가 사용하는 태스크 큐보다 우선순위가 높다
- Promise 객체는 비동기 처리 중에 pending 상태를 표현할 수 있다
- Promise로 비동기 처리 순서를 강제할 수 있다
 => Promise.prototype.then 체인을 이용해 비동기 처리 순서를 강제할 수 있다
- Promise.prototype.finally() 메서드는 성공, 실패에 상관없이 항상 호출된다
 => Promise.prototype.finally() 메서드는 Promise가 settled 되었을 시 항상 호출된다




async/await
- await 키워드로 비동기 처리에 순서를 부여한다
 => await 키워드는 여러 개가 쓰였을 시 뒤쪽 코드를 Promise의 .then() 함수를 사용하는 것처럼 만들어, 비동기 처리에 순서를 부여한다
- 에러가 발생했을 경우 try-catch 구문으로 에러를 처리할 수 있다
 => try-catch 구문으로 비동기 코드의 에러 또한 처리할 수 있다
- async 함수는 동기적으롤 보이지만 비동기적으로 실행된다
  단 내부에서 await 키워드가 쓰이지 않았을 경우엔 Promise.then()으로 처리된다
- await 키워드는 프로미스를 리턴하지 않는 함수라도 사용할 수 있다
  단, 이 경우 리턴한 데이터는 Promise.resolve()로 감싸진다

----------------------------------------------------------

Callback, Promise, async/await
콜백 함수
다음과 같이 비동기로 작동되는 함수가 있습니다.
이 비동기 함수는 2초 뒤에 Elice라는 이름을 인자로 받은 콜백함수의 인자로 넘겨줍니다.

function getName(cb) {
    setTimeout(() => {
        cb("Elice");
    }, 2000);
}
앞선 함수를 실행하려면 다음과 같이 getName 함수에 콜백함수를 넣어서 사용할 수 있습니다.

getName((name) => {
    console.log(name);
})
// 2초 후 Elice
만약 getName 함수를 이용해서 Elice라는 이름을 3번 출력하려면 어떻게 해야할까요?

다음과 같이 getName 함수를 절차적으로 실행시키면 2초 뒤에 Elice라는 이름이 나옵니다.

getName((name) => {
    console.log(name);
})

getName((name) => {
    console.log(name);
})

getName((name) => {
    console.log(name);
})
// 2초 후
// Elice
// Elice
// Elice
하지만 앞선 방법으로 콜백함수를 호출하면 각 함수에 대한 데이터를 사용할 수 없습니다. 예를들어 이름, 나이, 주소가 저장된 데이터를 비동기적으로 가져와야 한다고 가정해보겠습니다.

function getName(cb) {
    setTimeout(() => {
        cb("Elice");
    }, 2000);
}

function getAge(cb) {
    setTimeout(() => {
        cb(6);
    }, 2000);
}

function getAddress(cb) {
    setTimeout(() => {
        cb("Seoul");
    }, 2000);
}
해당 정보 출력하고자 합니다. 하지만 console.log를 한 번만 사용해야합니다. 어떻게 해야할까요?
다음 코드를 살펴보지 않고 직접 한번 시도해보세요.

getName((name) => {
    getAge((age) => {
        getAddress((address) => {
            console.log(name, age, address)
        })
    })
})
앞선 코드처럼 콜백함수 안에 콜백 함수를 반복하여 호출해야 name, age, address를 한꺼번에 접근할 수 있습니다. 비동기 함수가 3개 쓰이고, 각 2초씩 걸리기 때문에 6초 뒤에 Elice 6 Seoul이라는 log가 나오게 될 겁니다.

바로 이것을 콜백 지옥이라고 부릅니다. 비동기 함수를 3개만 썼을 뿐인데도,
코드가 정말 복잡해졌습니다. 비동기 함수가 더 많다면 관리하기 더 힘들겠죠?

Promise
자 이번에는 Promise를 이용하여 콜백 지옥을 보기 좋게 바꾸어 봅시다.
앞서 사용한 비동기 함수인 getName, getAge, getAddress를 가져오겠습니다.
그리고 Promise 객체를 만들어서 다음과 같이 수정해보겠습니다.

function getName() {
    return new Promise((resolve) => {
        setTimeout(() => {
            resolve("Elice");
        }, 2000);
    })
}

function getAge() {
    return new Promise((resolve) => {
        setTimeout(() => {
            resolve(6);
        }, 2000);
    })
}

function getAddress() {
    return new Promise((resolve) => {
        setTimeout(() => {
            resolve("Seoul");
        }, 2000);
    })
}
각 함수는 Promise 객체를 리턴합니다. 그리고 Promise 객체는 항상 2초 후에 resolve 되어 이름, 나이, 주소에 대한 정보를 주도록 했습니다. 그리고 다음과 같이 호출하여 사용할 수 있습니다.

getName().then((res) => {
    console.log(res);
})

getAge().then((res) => {
    console.log(res);
})

getAddress().then((res) => {
    console.log(res);
})
하지만 이렇게 사용하면 정보를 하나의 함수에서 제어하기 힘들겠죠?
따라서 다음과 같이 사용할 수 있습니다.

Promise
    .all([getName(), getAge(), getAddress()])
    .then((res) => {
        const [name, age, address] = res;
        console.log(name, age, address)
    })
Promise.all은 첫번째 인자에 배열을 받습니다. 그리고 그 배열의 원소는 모두 프로미스 객체입니다.
getName, getAge, getAddress 함수는 모두 프로미스 객체를 반환하기 때문에 Promise.all에서 사용할 수 있습니다. 또한, Promise.all은 병렬적으로 배열의 원소에 있는 프로미스를 동시에 실행시킵니다. 따라서 결과적으로 2초 후에 Elice 6 Seoul을 출력할 수 있습니다. 즉, 동시에 Promise 객체를 반환하는 함수들을 실행할 수 있는 것입니다. 콜백함수로는 할 수 없는 일입니다.

async/await
프로미스를 더 간단하게 사용하려면 다음과 같이 사용할 수 있습니다.
즉시실행 함수 형태에 async 화살표 함수를 이용해 작성할 수 있습니다. await 키워드에서 프로미스가 resolve 될 때까지 기다린 후 다음 순서로 넘어가기 때문에 6초 후에 Elice 6 Seoul이 출력됩니다.

(async () => {
    const name = await getName();
    const age = await getAge();
    const address = await getAddress();

    console.log(name, age, address);
})();
Promise와 async/await는 효과적으로 사용될 수 있는 상황이 다르기 때문에
두 방법 모두 잘 알고 있어야합니다. 메소드 체이닝이 많이 사용되는 코드에서는 Promise가 코드에 일관성을 지켜서 더 깔끔하게 보일 수 있고, 개별 함수를 호출하여 값을 받아오는 경우에는 asyne/await이 효과적입니다.

-----------------------------------------------------------

HTTP, REST API
- HTTP 서버와 클라이언트 간 통신 방법을 정한 규약이다
- HTTP 요청 메서드는 요청에 대한 동작을 정의한다
- HTTP Status는 요청의 결과를 코드로 나타낸다
- HTTP 요청 메시지, HTTP 응답 메시지에 헤더 정보가 모두 포함된다

Fetch API
- fetch()는 프로미스를 리턴한다
- 네트워크 요청 실패 시 response.ok는 false이다
- 네트워크 요청 성공 시 response.headers로 헤더 정보를 얻을 수 있다
- Response.prototype.json() 메서드는 비동기 함수로 프로미스를 리턴한다

