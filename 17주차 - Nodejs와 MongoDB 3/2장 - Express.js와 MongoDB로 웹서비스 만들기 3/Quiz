1. JWT
 - header, payload, signature로 구성되어 있다
 - base64 인코딩을 사용하여 토큰의 내용을 평문으로 확인할 수 있다
 - jwt는 payload에 따라 signature가 달라지기 때문에 사용자가 토큰을 변조할 수 없다
 - JSON 형태의 데이터를 Base64 URL-Encode 방식으로 인코딩한 후 Hash화 하여 생성하며,
   Header, Payload, Signature의 3개 부분으로 구성되는 문자열 형태의 토큰이다
 - 저장소 없이 전자 서명으로 사용자를 인증하는 방법이다
 - 웹 브라우저가 아닌 모바일 앱 등에서도 동일한 방식으로 사용자 인증을 할 수 있다
 - 데이터베이스 접근을 줄이기 위해 Session 대신 쿠키에 저장한다
 - 전자 서명을 이용해 인증을 하는 방식이다
 - 서버가 JWT를 생성할 때 비공개 키를 이용해 서명 한다
 - 서버는 로그인 된 유저 정보를 JWT로 생성하여 클라이언트에 전달한다
 - 클라이언트는 전달받은 JWT를 이용해 인증이 필요한 요청에 사용한다
 - JWT는 어느 클라이언트에서나 동일한 방식의 사용자 인증을 구현할 수 있다
   따라서 모바일 앱과 같은 클라이언트에서도 사용할 수 있으며,
   웹 브라우저가 아닌 어플리케이션에서 활용하기 부적합한 것은 SESSION이다

2. 쿠키와 세션
 - 쿠키는 브라우저의 저장소를 사용한다
 - 세션은 서버의 저장소를 사용한다
 - 쿠키는 브라우저 저장소에 저장되기 때문에,
   서버의 상태와 관계없이 클라이언트가 쿠키의 내용을 유지할 수 있다

3. SMTP
 - Simple mail transfer protocol의 약자이다
 - SMTP 서버를 사용해 메일을 발송할 수 있다
 - SMTP는 메일 서비스의 SMTP 서버를 이용해,
   프로토콜에 해당하는 요청을 생성하여 메일 발송 기능을 구현한다
   API를 제공해 주는 것은 SendGrid나 Mailgun 같은 유료 메일 발송 서비스이다

4. OAuth 2.0 사용 방법
 - OAuth 인증 요청 - OAuth 토큰 저장 - 서비스 제공자 데이터 사용

5. Node.js 서버를 구축할 때 Nginx를 사용하는 이유
 - HTTPS 인증을 처리하기 위해
 - 여러 서버의 도메인을 관리하기 위해
 - Static File Caching을 이용하기 위해
 
 - Node.js 서버는 자체적으로 HTTP 요청과 응답을 처리한다
   Nginx를 사용하지 않더라도 Node.js 서버는 이를 처리할 수 있다

6. SSR 과 API 를 만드는 것의 차이
SSR은 HTML 페이지를 화면에 띄우는 것이고,
API를 만드는 것은 백엔드와 프론트엔드 사이에서 자원을 주고 받는 통로를 만드는 것이다
Node.js에서는 PUG라는 템플릿 엔진을 이용해 html을 화면에 띄웠다
반면 API를 만든다는 것은 res.json({ }); 을 이용해 JSON 형태로 데이터를 내보내는 것이다

7. Nginx
 - 최근 신규 프로젝트에서 가장 많이 채택되고 있는 웹 서버 소프트웨어로
   HTTP 요청을 받아 HTTP 응답을 보내주는 소프트웨어이며, reverse-proxy 기능을 수행한다

8. OAuth
 - OAuth를 사용하면 웹 서비스 제공자는 로그인 기능을 구현하지 않아도 된다
 - OAuth를 사용하면 구글, 페이스북, 카카오 등의 계정으로 웹사이트에 회원가입으르 하지 않고 이용할 수 있다
 - OAuth 인증은 OAuth 서버에 인증 요청을 하고 데이터를 수신하는 과정을 거친다


