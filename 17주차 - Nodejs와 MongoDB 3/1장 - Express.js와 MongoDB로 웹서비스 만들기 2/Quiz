1. Hash 함수
 - 암호화 방법 중 하나이다
 - 비밀번호를 저장하는 데에 주로 활용된다
 - Hash 함수는 단방향 암호화 함수로,
   Hash 값을 알더라도 원본 문자열을 알아낼 수 없다

2. Passport.js
 - Express.js에 로그인을 구현하는 것을 도와주는 패키지
 - 기본적으로 세션을 사용해 로그인을 구현해준다
 - Strategy라는 인터페이스르르 사용해 다양한 로그인 방식을 제공한다
 - Passport.js는 로그인 방식을 처리하도록 도와주는 패키지일 뿐,
   회원가입은 구현해주지 않으며,
   로그인 또한 Passport.js를 이용해 직접 작성해야 한다

3. Session Store
 - 세션을 저장하는 저장소이다
 - Session Store가 없다면 Express.js 앱이 종료될 때 모든 세션 정보가 사라진다
 - Session Store를 사용하면 서버 간 동일한 세션 저장소를 공유할 수 있다

4. MongoDB Index 장점
 - MongoDB Aggregation을 미리 작성할 수 있다
 - MongoDB Collection 저장소를 압축할 수 있다
 - Document를 정렬하여 Document 검색 속도를 매우 향상 시킬 수 있다

5. CSR을 구현하기 위해 사용되는 기술
 - REST API
 - Fetch, Ajax 등 비동기 HTTP 호출 기능
 - Pug Template Engine은 SSR을 지원하는 기술

6. 미들웨어 - Passport.js
 - Express.js 어플리케이션에 사용자 인증 기능을 구현하기 위해 사용하는 미들웨어로
   strategy 인터페이스를 활용해 다양한 로그인 방식의 구현을 지원한다

7. Session
 - 웹 서버가 클라이언트 별로 정보를 구분해 서버에 저장하고 있는 것을 말한다
 - 클라이언트가 세션의 정보에 접근하기 위해서는 서버로부터 전달받은 Session ID를 함께 전송한다
 - Express.js에서는 express-session 패키지를 사용해 간단하게 session 동작을 구현할 수 있다
 - 클라이언트 요청 시 Session ID를 사용하여 클라이언트의 정보를 다시 확인한다
 - Express.js에서 express-session 패키지를 이용해 session 동작을 구현할 수 있다
 - Session Store를 사용하면 구현된 어플리케이션 종료 후 다시 실행하더라도 유저의 로그인을 유지한다
 - Session Store는 여러 서버 간 session 정보를 공유할 수 있다
 - Session은 클라이언트가 아닌 웹 서버가 클라이언트의 정보를 클라이언트 별로 구분하여 서버에 저장한다

8. CSR
 - 페이지 로드 시 필요한 리소스(HTML 등)를 서버가 아닌 클라이언트에 선언하는 렌더링 방식




