클린 코드
클린 코드란 말 그대로 깨끗하게 작성된 코드를 의미합니다. 깨끗하게 작성된 코드란 직접적이고 단순하여 읽기가 쉽고, 코드 작성자가 아닌 누가 보더라도 의도가 명확히 드러나는 코드입니다. 이러한 코드는 가독성이 좋고, 의존성을 최대한 줄여 유지보수가 쉬운 특징이 있습니다.

클린 코드를 써야 하는 이유
프로그래머는 작성 기한을 맞추기 위해서 나쁜 코드를 양산할 수밖에 없다고 생각합니다. 하지만 나쁜 코드를 양산하면 결국 기한을 맞추지 못합니다. 오히려 엉망진창인 코드 때문에 개발 속도가 느려지고 결국 기한을 놓칩니다. 기한을 맞추는 유일한 방법은 언제나 코드를 최대한 깨끗하게 유지하는 것입니다.

타입이 필요한 이유
코드를 통해 타입이 필요한 이유를 살펴보겠습니다.

let text = 'elice';
console.log(text.charAt(0)); // "e" 출력
문자열에 charAt()을 이용하면 입력된 인덱스에 해당하는 문자를 반환합니다. 위의 경우 인덱스 첫 번째 문자인 e가 출력되는 것을 확인하실 수 있습니다. 자바스크립트는 동적 타이핑을 지원하기 때문에 text 변수가 선언되는 과정에서 타입이 문자형으로 지정됩니다.

이후 코드를 작성하는 과정에서 text 변수에 다른 값을 할당했다고 가정해 봅시다.

// ...
text = 12345;
console.log(text.charAt(0));
그리고 charAt()을 이용해 첫 번째 문자를 출력하려고 한다면 어떻게 될까요? 직접 실행해 봅시다.

TypeError: text.charAt is not a function 에러가 발생하는 것을 확인하셨나요? 이처럼 자바스크립트는 타입이 없기 때문에 실행 후에 타입 에러를 확인할 수 있습니다. 반면 타입스크립트는 같은 코드에 대해 아래와 같이 실행을 하기 전에, 미리 에러를 확인할 수 있습니다.


정리하자면 자바스크립트의 런타임 단계에서 발생하는 타입 에러는 타입스크립트를 이용한다면 컴파일 단계에서 미리 확인하고 고칠 수 있는 것입니다. 런타임 단계에서 발생하는 에러로 인해 프로그램이 멈춘다면, 운영되는 서비스에 큰 차질이 생길 수 있습니다. 따라서 타입스크립트를 이용한다면 타입 에러와 같은 개발자의 실수를 미리 방지할 수 있습니다.

클린코드와 타입스크립트
위에서 소개한 타입이 필요한 이유처럼 타입을 정의함으로써 개발자의 실수를 줄일 수 있고, 명시된 타입을 보고 해당 변수의 자료형이 무엇인지 쉽게 이해할 수 있습니다.
결과적으로 어떤 용도로 코드가 작성되어있고 무엇을 의미하는지 파악하기 훨씬 용이하기 때문에 유지보수에 유리하고 자연스럽게 개발 속도도 빨라지게 됩니다.

let text: String = 'hello';

--------------------------------------------------------

1. 타입스크립트 쓰는 이유로 적절한 것을 고르세요
 - 변수에 타입을 적용하여 클린 코드를 작성할 수 있도록 돕는다

 오답
 동적 타이핑을 이용하기 위해 사용한다
  => 동적 타이핑은 자바스크립트의 특징이다
 런타임 단계에서 타입 에러를 확인하고 고칠 수 있다
  => 컴파일 단계에서 타입 에러를 미리 확인할 수 있다
 타입을 하나하나 명시해야 하기 때문에 개발 속도는 오래 걸린다
  => 타입스크립트를 이용하면 유지 보수가 유리하기 때문에 개발 속도도 자연스럽게 빨라진다

2. 타입 스크립트 제공 타입
 - tuple, enum, void, never

 symbol은 원시 데이터 형(primitive data type)의 일종으로 ES6에서 추가된 타입이다

3. 프로퍼티를 선택적으로 만드는 타입으로 구성하는 Utility types는 어떤 것일까요?
 - Partial<T>
 Partial Utility type은 프로퍼티를 선택적으로 만들 때 사용하고,
 주어진 타입의 모든 하위 타입 집합으르 나타내는 타입을 반환한다

4. 일급객체 총족 조건 해당하는 사항
 - 함수를 다른 함수에 매개변수로 제공
 - 함수가 함수를 반환
 - 함수가 변수에 할당

----------------------------------------------------------

타입스크립트 기본
1. 타입스크립트 개요
타입스크립트란 자바스크립트에 타입을 부여한 언어로, 자바스크립트의 ES7 이하의 문법을 포함하고 있습니다. 그래서 타입스크립트의 컴파일러를 통해 자바스크립트와 완벽히 호환할 수 있으며, 자바스크립트의 한계를 해결하기 위해 등장하였습니다.

타입스크립트를 사용하면 동적 타입을 정적으로 선언하여 컴파일 시점에서 타입 에러를 방지할 수 있습니다. 그리고 타입스크립트는 타입 추론(타입 유추)을 제공하기 때문에 자바스크립트로 작성된 코드도 어느 정도 타입을 유추해 타입 제어가 가능합니다. 또한 자바스크립트에서 찾을 수 없는 인터페이스나 제니릭 같은 추가 기능을 제공합니다.

2. 타입스크립트의 기본 타입
타입스크립트에서 기본으로 제공하는 타입들입니다.
기본 자료형

string: 문자열
Boolean : 참 / 거짓
number : 숫자
null : 의도적으로 비어있는 값
undefined : 아무 값이 할당되지 않은 상태
참조 자료형

object : 기본 자료형 외의 타입
array : 배열
추가 자료형

tuple : 길이와 각 요소의 타입이 정해진 배열
enum : 특정 값들의 집합
any : 모든 타입을 저장 가능
void : 결과 값을 반환하지 않는 함수의 타입
never : 항상 오류를 발생시키거나 반환이 없는 함수의 타입
3. Utility types
유틸리티 타입에 앞서 먼저 타입을 직접 정의하는 방법(type alias)을 알아보겠습니다.

let p1: {name:string, age:number} = {
  name: "elice",
  age: 13
};
위와 같이 타입을 직접 정의할 수 있지만, 매번 타입을 정의하는 것은 불편하기 때문에 아래와 같이 타입 자체에 이름을 붙어 변수를 만들 수 있습니다.

type Human = {
  name: string;
  age: number;
};

let p2:Human = {name: "cheshire", age:15};
여기서 name과 age를 프로퍼티라고 합니다. 이러한 타입은 뒤에서 배울 인터페이스와 유사한데, 뒤에서 더 자세히 학습할 예정입니다.

그래서 유틸리티 타입이란 이미 정의해 놓은 타입을 변환하고 싶을 때 사용하면 좋은 타입입니다. 유틸리티 타입을 이용하면 기존의 타입을 이용해 새로운 타입을 만들 수 있습니다. (마찬가지로 인터페이스에도 유틸리티 타입을 적용할 수 있습니다.)

유틸리티 타입에서 사용되는 <T>와 같은 꺾쇠 형태는 뒤에서 배울 제네릭(Generic)의 문법입니다. 제네릭이란 어떤 함수나 클래스가 사용할 타입을 생성 단계가 아닌 사용 단계에서 정의하는 프로그래밍 기법입니다. 제너릭은 뒤에서 더 자세히 다룰 예정입니다. 이번 장에서는 제네릭을 이용해 정의된 타입을 쉽게 변경할 수 있도록 도와주는 유틸리티 타입들에 무엇이 있는지를 학습해보시기를 바랍니다. (강의자료에 있는 코드를 한 번씩 실행해보면서 익히기를 권장합니다.)

Partial<T> : T의 프로퍼티를 선택적으로 구성할 수 있습니다.
Readonly<T> : T의 프로퍼티를 읽기 전용으로 설정하여, 값을 재할당하는 경우 에러가 발생합니다.
Record<K, T> : 프로퍼티 키를 K, 값을 T로 하는 타입을 만들 수 있습니다.
여러 키들을 지정하기 위해 타입을 선언한 방식(type Page = 'home' | 'about' | 'contact';)처럼 두 개 이상의 타입을 선언하는 방식을 유니온 타입이라고 합니다.
Pick<T, K> : T 타입 중에서 K 프로퍼티만 지정하여 타입을 만들 수 있습니다.
Omit<T, K> : T 타입의 모든 프로퍼티 중 K를 제거하여 타입을 구성합니다.
Exclude<T, U> : 타입 T에서 U와 겹치는 타입을 제외한 타입을 구성합니다.
Extract<T, U> : 타입 T에서 U와 겹치는 타입만 포함하여 타입을 구성합니다.
NonNllable<T> : T 타입에서 null과 undefined를 제외한 타입을 구성합니다.
Parameter<T> : 함수 타입 T의 매개변수의 타입들의 튜플로 타입을 구성합니다.
ConstructorParameters<T> : 클래스의 생성자를 비롯한 생성자 타입의 모든 매개변수 타입을 추출합니다.
ReturnType<T> : 함수 T가 반환한 타입으로 타입을 구성합니다.
Required<T> : 타입 T의 모든 프로퍼티가 필수로 설정된 타입을 구성합니다.
4. TypeScript를 이용해 함수 사용하기
매개변수와 인수

function add(x, y) {
    return x + y;
}
add(2, 5);
매개변수 : 함수를 정의할 때 사용되는 변수를 매개변수라고 합니다. (x, y)
인수 : 함수를 호출할 때 사용되는 값을 인수라고 합니다. (2, 5)
인자 값, 매개변수, 파라미터(Parameter)는 모두 같은 말입니다.
일급 객체

다른 객체들에 일반적으로 적용 가능한 연산을 모두 지원하는 객체를 일급 객체라고 합니다.
자바스크립트의 함수는 다른 함수에 매개변수로 제공할 수 있습니다.
let elice = function(func) {
   func();
}

elice(function() {
   console.log('coding'); // "coding"
});
자바스크립트의 함수는 함수에서 반환이 가능합니다.
function elice() {
   return function() {
       console.log('coding'); // "coding"
   }
}

let test = elice();
test();
자바스크립트의 함수는 변수에 할당이 가능합니다.
let elice = function() { return "coding"; };
console.log(elice()); // "coding"
따라서 자바스크립트의 함수는 일급 객체이고, 타입스크립트도 동일합니다. 이러한 타입스크립트 함수의 특성 때문에 함수를 선언하는 5가지 방식이 있습니다.
선언 방법 함수 선언식, 함수 표현식, 화살표 함수 표현식, 단축형 화살표 함수 표현식, 함수 생성자 → 각 함수 선언 방식의 차이를 알고 사용하시기를 바랍니다.
함수 선언식은 호이스팅이 되지만, 함수 표현식은 호이스팅이 되지 않습니다.
일반 함수는 함수가 호출될 때 this에 바인딩할 객체가 동적으로 정해지지만, 화살표 함수는 함수를 선언할 때 정적으로 정해집니다.
타입스크립트와 함수

타입스크립트에서 함수를 사용할 때는 매개변수에 타입을 지정하여 올바른 인수가 전달되도록 합니다.
타입스크립트는 타입 추론이 가능하기 때문에, 함수 사용 시 모든 타입을 일일이 명시하지 않아도 되는 경우도 있습니다.
function add(a: number, b: number) {
    const res = a + b; 
    return res.toString();
}
위의 경우 res 변수는 number, 반환 값은 string이라는 것이 명백하기 때문에 따로 타입을 명시하지 않아도 됩니다. 이는 코드가 짧아지는 이점이 있습니다.



