1. 글로벌 스코프에서 this 포인트는 window 객체를 나타내며
   글로벌 스코프에서 선언된 변수는 모두 window property가 된다
 - document : 브라우저에 로드된 웹 페이지로 HTML 문서 자체를 표현하는 객체이다
 - scope chain : 여러 스코프의 관계가 어떻게 연결되어 있는지 나타내는 것으로,
   스코프 체인을 따라 글로벌 환경에 도달할 수 있다
 - undefined : 변수는 존재하나 값이 할당되지 않은 상태이다

2. node.js
 - v8 엔진을 통해 자바스크립트를 웹 브라우저 뿐만 아니라,
   어느 환경에서도 실행할 수 있게 만든 것이 node.js이다
 - 이벤트 기반으로 비동기 동작의 완료를 처리한다
 - 자주 사용되는 es6 문법을 지원해준다
 - 비동기 동작을 구현하기 위해서 callback, promise, async-await을 활용하는 방법이있다
 - node.js는 싱글 쓰레드 기반의 비동기 방식으로 cpu 리소스를 효율적으로 관리한다
   멀티쓰레드 기반의 동기 방식은 한번의 여러 작업을 동시에 진행할 수 있지만,
   동작을 실행하고 기다리는 동안에 cpu 리소스가 낭비될 수 있다

3. 웹
 - 웹 서비스는 기본적으로 http 요청과 응답의 반복으로 이루어진다
 - 웹 서비스 개발 시 프론트엔드는 사용자가 직접 사용하게 되는 웹 페이지를,
   백엔드는 사용자에게 보이지 않는 데이터 가공 등의 기능을 주로 담당한다
 - 정적 웹은 사용자와 상호작용하지 않는 단방향 통신,
   동적 웹은 사용자와 상호작용을 하는 양방향 통신을 제공한다
 - 웹 프레임워크란 웹 서비스에 필요한 기능들을 제공해주는 다양한 도구들의 모음을 말한다
 - csr과 ssr 모두 동적 웹을 구현하는 방법이다
   csr은 프론트엔드에서 사용자가 페이지에서 보는 동적인 부분을 처리하는 방식이고,
   ssr은 백엔드에서 페이지 대부분의 영역을 처리해서 프론트엔드로 전달하는 방식을 말한다

4. Promise와 async/await
 - Promise를 활용해 여러 비동기 요청의 순서를 조작하여 쉽게 처리할 수 있다
 - Promise를 이용할 때 비동기 실행이 완료된 후 .then, .catch, .finally 등의 핸들러를 붙여 각각 데이터 처리,
   에러 처리, 클린업 로직을 실행한다
 - async/await을 이용할 때 여러 개의 await을 순서대로 나열하여,
   then chain을 구현할 수 있다
 - async/await과 Promise.all()을 조합하여 병렬적으로 처리할 수 있다
 - catch 뒤에 계속 핸들러가 붙어있다면, 에러를 처리한 후에 계속 진행된다
   이때는 catch에서 리턴한 값이 then으로 전달된다

5. use Reducer
 - 별도의 라이브러리 없이 flux pattern에 기반한 상태 관리를 구현한다
 - nested state와 같은 복잡한 여러 개의 상태를 한번에 관리하거나 어떤 상태에 여러 가지 처리를 적용할 때 유용하다

 useContext : 여러 컴포넌트에서 상태를 효율적으로 공유하기 위해서 사용한다
 useRef : 상태가 변경되어도 화면이 리렌더링되지 않는 상태를 정의할 때 사용한다
 useState : 비교적 간단한 상태를 정의할 때 사용한다

6. spa와 라우팅
 - spa는 매번 페이지 요청을 할 필요가 없기 때문에 네트워크 요청이 줄어든다
 - spa에서 라우팅을 하기 위해서 주로 useNavigate(useHistory) 혹은 URL Hash를 이용해
   페이지 리로드 없는 페이지 전환을 구현한다
 - react-router와 같은 라이브러리를 활용하면 라우팅 관련 기능을 쉽게 사용할 수 있다
 - react-router를 이용해 컴포넌트를 특정 path와 연결하여,
   해당 path로 진입 시 컴포넌트를 렌더링하게 할 수 있다
 - spa는 csr 기술을 활용한다

7. React styling 도구
CSS Module : 선택자가 겹치는 것은 방지하나 일일이 스타일링을 해주어야 한다
Test Framework : 어플리케이션 테스트를 자동화 해주는 도구로 styling 도구와는 무관하다
UI Framework : 이미 만들어져 있어 간편하게 쓰기 좋으나 프레임워크의 디자인 철학을 벗어나기 어렵고 컴포넌트를 직접 커스터마이징하기 어렵다는 문제가 있다
CSS in JS library : 별도의 css 파일 없이 jsx 파일 내에서 스타일링을 진행한다
 컴포넌트 재사용이 쉽고, 스타일 적용이 편리하지만 직접 스타일링을 해주어야 한다

8. 