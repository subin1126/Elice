1. React의 특징
 - ui를 구성하기 위해 '컴포넌트' 라는 단위로 개발을 진행
 - react는 내부적으로 virtual dom(가상 dom)을 통해 렌더링을 진행한 뒤 변경점만 사용자 화면에 반영한다
 - jsx를 사용하는 것은 선택사항 이지만 개발 효율을 위해 사용하는 것을 권장하고 있다
 - 컴포넌트 단위로 앱을 작성하여 코드의 재사용성을 늘릴 수 있다
 - 한 페이지에서 데이터가 자주 바뀌는 웹앱을 개발하는데 적절하다
 - React는 Facebook, Instagram 등 대규모 서비스에서 사용되고 있다
 - React는 대규모 프로젝트에서 데이터를 효율적으로 관리하는데 유용하지만
   실행속도 면에서는 다소 불리하다
 - React에서는 컴포넌트 내의 데이터거ㅏ 바뀌면 자동으로 감지하여 ui를 업데이트한다

2. Array 내 요소 중 불필요한 것을 제거하고자 한다
 -> Array.filter

3. Array 메소드
 - forEach : 배열의 각 원소에 함수를 실행한다
 - map : 배열의 각 원소에 함수를 실행하고 결과값으로 새로운 배열을 만든다
 - filter : 배열의 각 원소에 함수를 실행해 조건을 만족하는 요소만 포함하는 배열을 만든다

4. Create React App의 특징
 - React 애플리케이션을 쉽게 생성할 수 있도록 도와주는 보일러 플레이트다
 - Babel, Webpack 등이 기본 탑재 되어있다
 - Node.js 환경 위에 구축된다
 - React 개발을 위해 반드시 Create React App을 사용해야하는 것은 아니다
   그러나 개발에 유용한 기능을 다수 포함하고 있으며,
   다수의 개발자에게 익숙한 환경이므로 협업에 도움이 되므로 사용을 권장한다
  
5. Create React App의 장점
 - React를 개발한 Facebook에서 관리하고 있어 꾸준한 지원이 보장된다
 - 프로젝트를 배포 시 해야 하는 번들링과 Trans-compile 등을 기본적으로 제공한다
 - 상대적으로 덜 중요한 코드는 가려져있어 온전히 React 개발에 집중할 수 있다
 - Create React App은 기본적으로 CSR만 지원한다

6. create react app으로 생성한 프로젝트에서 index.html, index.js 파일은 필수이다

7. 패키지 설치 방법
 - npm install을 통해 package.json에 정의된 의존성 패키지들을 모두 설치한다
 - npm install <패키지명>을 입력해 원하는 패키지를 npm 서버로부터 내려받는ㄷ나
 - 원하는 버전을 지정하여 패키지를 내려받을 수 있다

8. 리액트의 장점
 - 여러 개발 도구르르 지원한다
 - 컴포넌트의 재사용은 개발 시간을 크게 절약한다
 - 단방향 데이터 흐름을 통해 안정적인 코드를 제공한다
 - 리액트는 오픈소스이다

---------------------------------------------------------
React와 자바스크립트의 차이점
앞서 페이스북 사례를 통해 웹 앱 변화에 대응하여 프로세스 속도를 높이기 위해 React가 등장한 배경에 대해 확인했습니다. 그렇다면 React와 자바스크립트의 차이점이 무엇인지, 왜 굳이 React를 사용하는지에 대해 알아보겠습니다.

React는 앱 작성 방식을 정의하는 라이브러리입니다. 이는 데이터가 앱에 사용되는 방식과 그 데이터가 변화하는 결과에 따른 UI 변경 방법에 대해 명확한 규칙을 설정하여 수행합니다. 반면 자바스크립트는 규칙을 설정하지 않는 스크립트 언어라고 할 수 있습니다. 따라서 이러한 라이브러리 없이 작성된 앱은 더 자유로울수는 있지만, 정해진 것이 없기 때문에 코드를 작성하다가 길을 잃어버리기 쉽습니다.

먼저 React와 자바스크립트의 차이점 4가지를 간단한 코드와 함께살펴보겠습니다. 만약 자바스크립트의 문법이 익숙하지 않다면, 어떠한 문법들이 있었는지 튜토리얼을 다시 확인해 보시기 바랍니다.

사용자 인터페이스를 처음 만드는 방법
자바스크립트
자바스크립트에서 사용자 인터페이스는 보통 아래처럼 HTML을 통해 구현합니다. 이 때 자바스크립트는 따로 추가적인 코드가 필요하지 않습니다.

<div>
    <h1>엘리스 회원 목록</h1>
    <ul>
        <li>도도새</li>
        <li>모자장수</li>
        <li>체셔</li>
    </ul>
</div>
React
반면 React는 JSX로 반환되는 컴포넌트를 통해 UI를 정의합니다. JSX는 HTML처럼 보이지만 실제로는 자바스크립트입니다. 아래에서 생성된 MemberList 컴포넌트는 이후 ReactDOM 라이브러리에 의해 렌더링되어 화면에 출력될 수 있습니다.

function MemberList(props) {
    return (
        <div>
            <h1>엘리스 회원 목록</h1>
            <ul>
                <li>도도새</li>
                <li>모자장수</li>
                <li>체셔</li>
            </ul>
        </div>
    )
};
앱에서 기능이 분할되는 방식
자바스크립트
자바스크립트 앱에서는 앱의 기능 또는 UI의 요소를 분할하는 방법에 대한 특별한 요구사항이 없습니다. 기본적인 출력은 아래처럼 기본 HTML 파일에 정의합니다.

<div>
    <h1>엘리스 회원 목록</h1>
    <ul id="member-list">
        <li>도도새</li>
        <li>모자장수</li>
        <li>체셔</li>
    </ul>
</div>
그리고 목록을 업데이트하는 코드를 자바스크립트 파일에 넣어야 합니다.

function addMember() {
  ...
}
코드가 이렇게 작성되어야 하는 이유는 관심사 분리 원칙에 따라 화면에 출력을 하는 HTML과 기능을 구현하는 자바스크립트가 분리되도록 설계하였기 때문입니다. 하지만 이러한 방식은 앱이 복잡해짐에 따라 큰 골칫거리가 되었습니다. 왜냐하면 하나의 HTML을 구성하는 코드가 서로 다른 자바스크립트 파일에 있을 수 있기 때문에 HTML의 기능이 구현된 코드가 위치한 곳을 기억하기 어렵기 때문입니다.

React
반면 React를 이용하면 위의 기능을 구현하는데 필요한 코드를 하나의 파일로 유지할 수 있습니다.

function MemberList(props) {
    function addItem() {
        ...
    }
 
    return (
        <div>
            <h1>엘리스 회원 목록</h1>
            <ul>
                <li>도도새</li>
                <li>모자장수</li>
                <li>체셔</li>
            </ul>
        </div>
    )
};
이렇게 하면 앱이 복잡해 지더라도 쉽게 이해할 수 있고 만들어 놓은 컴포넌트를 앱 전체가 공유할 수 있으므로 코드의 재사용이 가능해집니다.

---------------------------------------------------------

계속해서 React와 자바스크립트의 차이점에 대해 알아보겠습니다.

브라우저에 데이터가 저장되는 방법
자바스크립트
자바스크립트에서 사용자 데이터는 일반적으로 DOM(문서 객체 모델)에 저장됩니다. DOM은 브라우저 자체에서 만들고 유지 관리하며 전체 HTML을 나타냅니다. 예를 들어 자바스크립트에서는 아래와 같이 텍스트 박스를 정의하고 사용자가 입력하면 해당 내용이 브라우저에 저장됩니다.

<input type="text" id="input-member" />
그리고 사용자가 값을 입력할 때 개발자가 먼저 DOM에서 값을 찾은 다음 추출하여 해당 입력 상자에 값을 수동으로 입력합니다.

const input = document.getElementById("input-member");
console.log(input.value);
이는 보기에 편리해보이지만 만약 id가 바뀌게 되면 해당 id를 사용하는 모든 코드를 다시 수정해야 하기 때문에 관리하기가 번거롭습니다.

React
반면 React는 사용자의 입력을 기반으로 자신의 상태를 관리하고 업데이트 하는 제어 컴포넌트를 이용해 사용자 입력 시 자바스크립트 객체의 텍스트 값을 설정합니다. 이를 위해 먼저 상태를 정의해야 합니다.

const [member, setMember] = useState("");
입력이 변경될 때마다 설정이 되어야 하므로 HTML 코드는 조금 복잡해질 수 있습니다.

<input type="text" value={member} onChange={e => setMember(e.target.value)}
하지만 위와 같이 설정 후에는 아래 코드를 이용해 텍스트 박스의 현재 값을 훨씬 쉽게 알 수 있습니다.

console.log(member);
보는 것처럼 id를 별도로 관리할 필요가 없어 코드를 관리하기가 편리합니다. 현재 앱의 상태를 저장하기 위해 DOM에 의존하지 않음으로써 React가 사용자 데이터를 관리하는 이점은 앱이 성장할수록 누적됩니다. 자바스크립트 변수에 앱의 상태를 저장하는 것은 React가 자바스크립트에 비해 얻을 수 있는 가장 큰 이점 중 하나이며 앱이 복잡할수록 해당 이점이 커집니다.

UI 업데이트 방법
React와 자바스크립트의 마지막 차이점은 이벤트 발생 시 앱이 사용자에 반응하는 방식과 새로운 변경 사항을 반영하는 UI 업데이트 방식입니다.

자바스크립트
자바스크립트에서 텍스트 박스 옆에 다음처럼 버튼을 추가할 수 있습니다.

<input type="text" id="member" /> <button id="add-button">회원 추가</button>
그런 다음 해당 버튼을 누른 것에 응답하기 위해 DOM에서 버튼을 찾습니다.

const addButton = document.getElementById("add-button");
그리고 버튼에 click 리스너를 설정합니다.

addButton.addEventListener("click", function() {
 
  ...
 
})
그런 다음 리스너 내부에서 먼저 이전과 동일한 방법을 사용하여 입력 상자의 값을 가져올 수 있습니다. 그런 다음 식료품 목록에 새 항목을 추가하려면 DOM에서 목록을 찾고 추가 할 새 항목을 만든 다음 마지막으로 목록 끝에 추가해야합니다. 이것은 상당히 복잡합니다.

React
반면 React 앱은 자바스크립트 변수의 전체 상태를 유지합니다.

const [members, setMembers] = useState(["도도새", "모자장수", "체셔"]);
그리고 변수의 각 항목을 매핑한 후 그에 대한 목록 요소를 반환하여 JSX에 표시합니다.

<ul>
    {members.map(member => (
        <li key={member}>{member}</li>
    ))}
</ul>
그런 다음 버튼을 누르는 기능을 정의합니다. 클릭 리스너는 필요하지 않고 onClick 버튼 자체에 속성을 추가 할 수 있습니다.

<button onClick={addMember}>회원 추가</button>
이 함수에 추가할 것은 setMember 함수를 사용하여 기존 항목에 새 항목을 추가하는 것입니다.

function addMember() { setMembers([...members, "새로운 회원"]); }
이로써 React는 목록이 변경되었음을 자동으로 등록하고 UI를 자동으로 업데이트합니다. 이 업데이트 기능은 React가 가진 위대함 중 하나입니다.

-------------------------------------------------

9. React는 앱 작성 방식을 정의하는 라이브러리로 데이터가 앱에 사용되는 방식과
   그 데이터가 변화하는 결과에 따른 ui 변경 방법에 대해 명확한 규칙을 설정하여 수행한다

10. 자바스크립트와 react의 차이점
 - html과 자바스크립트를 하나의 파일로 유지한다
 - 제어 컴포넌트를 통해 자신의 상태를 관리한다
 - 이벤트 발생 시 ui를 자동으로 업데이트한다
 - react도 js파일이 있다. 다만 해당 파일 안에서 jsx 문법을 사용하는 차이가 있다

11. jsx 특징
 - jsx는 함수 호출과 객체 생성을 위한 문법적 편의를 제공하는 js의 확장이다
 - jsx는 컴포넌트를 구성하기 위해 사용한다
 - 실제로 배포할 때에는 Trans compile이 되어 js로 변환된다
 - 기존의 html과 다른 부분이 있으므로 유의하여야 한다
 - jsx는 element의 class는 className을 이용한다
 - jsx에서 닫는 태그는 필수이다
 - jsx에서 style은 object로만 입력할 수 있다

12. 
