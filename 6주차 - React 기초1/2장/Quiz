1. jsx에서 변수 선언 방식에 따른 재선언과 재할당 여부
선언 방식 | 재할당 | 재선언
var        가능     가능
let        가능     불가능
const      불가능   불가능

2. React.createElement() 메소드를 이용하면 엘리먼트를 jsx 문법을 이용하지 않고
   객체로 표현할 수 있다

----------------------------------------------------

엘리먼트 렌더링
엘리먼트란 React 앱의 가장 작은 단위를 말합니다. 또한 다음 장에서 배울 컴포넌트의 구성요소라는 것도 기억하시길 바랍니다. 엘리먼트에 화면에 표시할 것들을 기록하는데, 쉽게 말하자면 HTML 요소라고 할 수 있습니다. 렌더링은 이러한 요소들을 화면에 그리는 것입니다.

ReactDOM과 렌더링
DOM(Document Object Model)이란 객체 지향 모델을 통해 구조화된 문서를 표현하는 형식입니다. React는 가상(Virtual) DOM과 실제로 표시되는 DOM을 유지합니다. React는 실제 DOM을 추상화하여 가상 DOM에 만들어두고, 데이터가 업데이트되면 한 번에 렌더링하기 때문에 계속해서 DOM을 렌더링하는 것보다 속도가 빠릅니다. ReactDOM.render() 메소드를 이용하면 렌더링을 하게 됩니다.

HTML 파일 안에 id가 root인 요소가 있다고 해봅시다.

<div id="root"></div>
해당 HTML에 텍스트를 넣기 위해 ReactDOM.render()을 이용해 다음과 같이 렌더링을 할 수 있습니다.

const element = <h1>Hello, elice</h1>;
ReactDOM.render(element, document.getElementById('root'));
매개변수로는 표시할 엘리먼트와 HTML 어디에서 표시할 지를 넘겨줘야 합니다. 이 때 document.getElementById() 의 매개변수에 찾을 id를 넘겨줌으로써 표시할 위치를 찾을 수 있습니다. 해당 함수는 넘겨준 id의 요소를 가져와줍니다.

엘리먼트 업데이트
엘리먼트는 한 번 생성되면 수정이 불가능한 불변 객체이기 때문에 값을 변경하고 싶으면 새로운 엘리먼트를 만들어 업데이트 해야 합니다. 만약 시간을 출력하는 기능을 구현하고 싶다면 매 초마다 렌더링을 해줘야 합니다.

function tick() {
  const element = (
    <div>
      <h1>{new Date().toLocaleTimeString()}</h1>
    </div>
  );
  ReactDOM.render(element, document.getElementById('root'));
}

setInterval(tick, 1000);
Date객체의 toLocaleTimeString() 메소드를 이용하면 시간을 반환해주는데 실제로 시간이 변하는 것을 확인하기 위해서는 setInterval() 콜백을 이용해 tick을 계속해서 호출해야 합니다. setInterval()의 매개변수인 1000은 1초를 의미하며 해당 숫자를 바꿔 호출되는 간격을 변경할 수 있습니다. 해당 코드를 실행한 후 개발자 도구를 이용하면 HTML의 텍스트가 시간이 변함에 따라 똑같이 바뀌는 것을 확인할 수도 있습니다.

----------------------------------------------------

3. 엘리먼트와 렌더링
 - react 앱을 구성하는 가장 작은 단위를 엘리먼트라고 한다
 - dom이란 객체 지향 모델을 통해 구조화된 문서를 표현하는 형식을 말한다
 - ReactDOM.render() 메소드를 이용해 엘리먼트를 렌더링 할 수 있다
 - 엘리먼트는 한번 생성되면 수정이 불가능한 불변 객체이기 때문에
   값을 변경하고 싶으면 새로운 엘리먼트를 만들어 업데이트 해야한다

----------------------------------------------------

컴포넌트
앞선 장에서 여러 차례 언급된 컴포넌트에 대해 알아봅시다. 컴포넌트를 한 마디로 정의하자면 앱의 기능을 단위별로 캡슐화하는 React의 기본 단위입니다. 쉽게는 HTML 요소를 반환하는 함수와 같다고 생각해도 됩니다. 따라서 컴포넌트는 독립적이고 재사용 가능한 코드의 조각입니다. 컴포넌트는 종류로는 함수형 컴포넌트와 클래스형 컴포넌트가 있습니다.

함수형 컴포넌트
함수형 컴포넌트를 어떻게 사용해야 하는지 예제와 함께 확인해봅시다. 먼저 함수형 컴포넌트를 선언해주고, ReactDOM.render()를 이용해 렌더링을 해주면 됩니다. 매개변수로 함수형 컴포넌트를 <함수 이름 />와 같은 형태로 넘겨주고 요소를 표기할 곳을 함께 넘겨줍니다.

function Introduce() {
  return <h2>Hi, I am elice!</h2>;
}

ReactDOM.render(<Introduce />, document.getElementById('root'));
클래스형 컴포넌트
클래스형 컴포넌트도 마찬가지로 렌더링을 해주면 되며 구조만 약간 다릅니다. class 선언 시 React.Component의 메소드들을 사용하기 위해서 extends를 이용해 React.Component를 상속받도록 구현해야 합니다. 상속 시 해당 클래스형 컴포넌트에서 render() 메소드가 구현되어야 하는데 HTML을 반환해주면 됩니다. 아래는 위의 함수형 컴포넌트와 동일한 기능을 합니다.

class Introduce extends React.Component {
  render() {
    return <h2>Hi, I am elice!</h2>;
  }
}

ReactDOM.render(<Introduce />, document.getElementById('root'));
언제 사용하나요?
함수형 컴포넌트와 클래스형 컴포넌트가 언제 사용되는지 알아볼까요? 함수형 컴포넌트는 단순히 HTML UI를 반환하는 간단한 자바스크림트 함수로 자주 사용됩니다. 단순히 데이터를 받고 렌더링을 하면 끝이기 때문에 비상태형 컴포넌트라고도 합니다.

즉, 상태를 사용하지 않고 함수에 대한 결과를 반환하는데, 여기서 상태란 React의 State를 의미하며 컴포넌트의 렌더링 결과물에 영향을 주는 데이터를 갖고 있는 객체입니다. 쉽게 말하자면 컴포넌트의 현재 저장된 값이 State라고 보시면 됩니다.

클래스형 컴포넌트는 이러한 논리와 상태를 구현할 때 사용되어 상태형 컴포넌트라고 합니다. HTML을 반환하는 render() 메소드가 구현되어, 복잡한 UI 로직을 구현할 때 클래스형 컴포넌트가 사용됩니다. 특히 위에서 언급한 State를 사용할 때 반드시 클래스형 컴포넌트로 구현이 되어야 합니다.

DOM 태그
컴포넌트 렌더링 시 넘겨주었던 <함수 혹은 클래스 이름 />은 아래와 같은 엘리먼트를 만들어서 렌더링 시 넘겨줘도 괜찮습니다. 해당 태그를 DOM 태그라고 합니다.

const element = <Introduce />;
이러한 DOM 태그를 아래처럼 정의할 수도 있습니다. name을 엘리먼트에서 함께 넘겨주고 함수형 컴포넌트에서 props를 이용해 넘겨준 name을 받을 수 있습니다. props가 메소드의 매개변수 역할을 한다고 생각하면 됩니다. props에 관한 자세한 사항은 해당 이론 마지막에 추가로 설명하겠습니다.

function Introduce(props) {
  return <h1>Hello, {props.name}</h1>;
}

const element = <Introduce name="Elice" />;
ReactDOM.render(
  element,
  document.getElementById('root')
);

---------------------------------------------------------

4. 컴포넌트에 대한 설명
 - 컴포넌트의 종류 함수형 컴포넌트와 클래스형 컴포넌트가 있다
 - 클래스형 컴포넌트는 React.Component를 상속받아 구현한다
 - 컴포넌트 호출 시 <함수 혹은 클래스 이름 />과 같은 형태로 호출한다
 - 컴포넌트는 앱의 기능을 단위별로 캡슐화하는 React의 기본 단위로 독립적이고 재사용 가능한 코드의 조각이다

5. 클래스형 컴포넌트는 논리와 상태를 구현할 때 사용되어 상태형 컴포넌트라고 한다
   반면 함수형 컴포넌트는 비상태형 컴포넌트로 상태를 구현할 수 없다

6. 



