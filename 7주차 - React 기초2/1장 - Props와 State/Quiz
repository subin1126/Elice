1. props에 대한 설명
 - props는 부모 컴포넌트에서 자식 컴포넌트로만 전달이 가능하다
 - props가 변경되면 컴포넌트가 다시 렌더링된다
 - props로 전달할 수 있는 데이터는 모든 자바스크립트 표현이라면 가능하다
 - 컴포넌트에 원하는 값을 넘겨주기 위해서 사용한다
 - props의 값을 변경할 수 없다
 - props로 함수를 전달할 수도 있다

2. 부모 컴포넌트로부터 전달받은 props를 임의로 재할당해서 사용할 경우
   컴포넌트를 렌더링할 때 문제가 발생할 수 있다

3. 기본적인 DOM Element(div, span 등)들의 Attribute는 camel case로 작성한다
Element의 클래스명은 class 대신 className으로 작성한다
<input> element의 기본값은 defaultValue, defaultChecked로 설정한다

4. State에 대한 설명
 - State는 Component 내에서 유동적으로 변할 수 있는 값을 저장한다
 - 개발자가 의도한 동작에 의해 변할수도 있고 사용자의 입력에 따라 새로운 값으로 변경될 수도 있다
 - State를 변경하기 위해서는 setState 함수를 이용합니다
 - state가 변경되면 자동으로 컴포넌트가 재렌더링된다

5. setState를 할 때 변경할 값을 바로 매개변수로 전달해도 되고,
   함수를 전달해 값을 지정할수도 있다

6. object 혹은 array 내의 일부 값만 바꿀 경우
   실제 object나 array의 변경이 일어나는 것이 아니기 때문에
   React에서 State 값의 변경으로 인식하지 않아
   재렌더링 명령이 호출되지 않는다

-------------------------------------------------------

컴포넌트의 재사용
컴포넌트를 가지고 합성 및 추출하는 방법에 대해 알아봅시다. React에서는 컴포넌트를 적절히 합성하고 추출하여 재사용하는 것이 좋습니다. 코드의 재사용이 중요한 이유는 같은 동작을 하는 코드를 여러 번 작성한다면 코드의 가독성이 떨어지고 다른 사람이 보기에 이해하기가 어려워집니다. 또한 코드를 수정해야 할 때 여러 곳에 작성된 모든 코드를 수정하는 것은 매우 번거로운 일입니다. 따라서 가능한한 재사용 가능하도록 컴포넌트를 만들어야 합니다.

컴포넌트 합성을 이용하면 작은 기능을 하는 컴포넌트를 결합하여 더 복잡한 기능을 구축할 수 있습니다. 또한 컴포넌트 추출을 통해서는 여러 기능을 하는 컴포넌트를 작게 나눌 수 있습니다. 컴포넌트는 기능이 작을수록 재사용이 쉽기 때문에 컴포넌트의 합성과 추출이 중요합니다. 아래 예시와 함께 어떻게 하는 것인지 살펴볼까요?

컴포넌트 합성
컴포넌트 안에서 다른 컴포넌트를 참조하는 것이 가능합니다. 아래 코드를 살펴볼까요? Question 함수에서 Elice 함수를 참조하고 있습니다. 참조 방식은 지금까지 사용된 것과 동일하게 DOM 태그를 이용하면 됩니다. 렌더링 할 때도 마찬가지로 DOM 태그를 이용해 호출하고 있습니다.

function Elice() {
  return <h2>I am a elice!</h2>;
}

function Question() {
  return (
    <div>
      <h1>Who are you?</h1>
      <Elice />
    </div>
  );
}

// index.js
ReactDOM.render(<Question />, document.getElementById("root"));

-------------------------------------------------------

7. 컴포넌트는 컴포넌트 내에 다른 컴포넌트를 호출하여 참조하는 것이 가능하며,
   이를 컴포넌트 합성이라고 한다

-------------------------------------------------------

이어서 컴포넌트 재사용을 위한 컴포넌트 추출과 Props에 대해 알아보겠습니다.

컴포넌트 추출
한 컴포넌트가 복잡하다면 일부를 추출해서 분리하는 것이 가독성이 좋고 코드 재사용이 용이합니다. 만약 아래와 같은 댓글에 대한 컴포넌트가 있다고 해봅시다.

function Comment(props) {
  return (
    <div className="Comment">
      <div className="UserInfo">
        <img className="Avatar"
          src={props.author.avatarUrl}
          alt={props.author.name}
        />
        <div className="UserInfo-name">
          {props.author.name}
        </div>
      </div>
      <div className="Comment-text">
        {props.text}
      </div>
      <div className="Comment-date">
        {formatDate(props.date)}
      </div>
    </div>
  );
}
댓글에는 사용자의 이미지를 띄우는 Avatar와 사용자 정보를 띄우는 UserInfo, 그리고 댓글의 내용과 날짜를 띄우는 Comment에 대한 요소로 이루어져 있습니다. 이를 3개의 컴포넌트로 아래처럼 나눌 수 있습니다.

먼저 이미지를 띄우는 부분을 Avatar 컴포넌트로 분리합니다.

function Avatar(props) {
  return (
    <img className="Avatar"
      src={props.user.avatarUrl}
      alt={props.user.name}
    />
  );
}
그리고 사용자 정보를 띄우는 부분은 UserInfo 컴포넌트로 분리합니다.

function UserInfo(props) {
  return (
    <div className="UserInfo">
      <Avatar user={props.user} />
      <div className="UserInfo-name">
        {props.user.name}
      </div>
    </div>
  );
}
마지막으로 댓글의 내용과 날짜를 띄우는 부분은 Comment 컴포넌트에 남겨둡니다. 처음 한 컴포넌트에 모든 내용이 있는 것보다, Comment 컴포넌트가 간단해진 것을 볼 수 있습니다.

function Comment(props) {
  return (
    <div className="Comment">
      <UserInfo user={props.author} />
      <div className="Comment-text">
        {props.text}
      </div>
      <div className="Comment-date">
        {formatDate(props.date)}
      </div>
    </div>
  );
}
Props
Props는 컴포넌트로 전달되는 매개변수라고 생각하시면 됩니다. 쉽게 생각하면 함수의 매개변수라고 생각해도 좋습니다. 컴포넌트에서 어떤 값을 전달받아 처리하고 싶다면 Props를 이용해야 합니다. 그리고 컴포넌트를 호출할 때 Props를 넘겨줘야 합니다. 마치 함수 호출 시 매개변수를 전달하는 것처럼요.

아래 예제를 살펴보며 봅시다. Props는 HTML 속성을 통해 컴포넌트로 전달됩니다. 그리고 사용할 때는 중괄호를 이용해 표현하며 props.속성과 같은 형태로 호출됩니다.

const element = <Introduce name="Elice" />;
function Introduce() {
  return <h2>I am a {props.name}!</h2>;
}
단, 위의 예제는 함수형 컴포넌트이고 클래스형 컴포넌트에서 사용할 때는 this를 붙여 사용합니다.

------------------------------------------------------

8. dom이란 객체 지향 모델을 통해 구조화된 문서를 표현하는 형식이다
jsx는 자바스크립트를 확장한 문법을 의미한다
엘리먼트란 react 앱의 가장 작은 단위를 말한다
컴포넌트로 값을 전달하기 위한 매개변수를 칭하는 용어는 props이다

------------------------------------------------------

State
State는 앞서 배운 Props처럼 컴포넌트의 렌더링 결과물에 영향을 주는 데이터를 갖고 있는 객체입니다. 다만 Props는 컴포넌트에 전달되어 사용되는 반면 State는 컴포넌트 안에서 관리된다는 차이가 있습니다. 즉 Props는 함수의 매개변수처럼 사용되는 것이고 State는 함수 내에 선언된 변수처럼 사용되는 것입니다. 시간을 표시하는 코드를 가지고 State를 사용하는 방법을 차례차례 알아봅시다.

function tick() {
  const element = (
    <div>
      <h1>{new Date().toLocaleTimeString()}</h1>
    </div>
  );
  ReactDOM.render(element, document.getElementById('root'));
}

setInterval(tick, 1000);
위의 컴포넌트에서 현재 시간을 띄우는 코드를 따로 캡슐화하여 시간을 표시하는 부분과 분리하겠습니다. 그러기 위해 시간을 표시하는 컴포넌트에서 실제 시간을 가져올 때 앞에서 배웠던 Props를 이용하겠습니다. 참고로 이런식으로 캡슐화를 하는 경우, 시간을 표시하는 양식이 달라졌을 때 시간을 구해주는 tick 컴포넌트를 변경없이 그대로 사용할 수 있고 Clock 컴포넌트는 다른 나라의 시간을 넘겨주면 재사용이 가능합니다.
function Clock(props) {
  return (
    <div>
      <h1>{props.date.toLocaleTimeString()}.</h1>
    </div>
  );
}

function tick() {
  ReactDOM.render(
    <Clock date={new Date()} />,
    document.getElementById('root')
  );
}

setInterval(tick, 1000);
위에서 Props를 사용한 이유는 함수형 컴포넌트에서는 State를 사용할 수 없기 때문입니다. 따라서 함수형 컴포넌트를 클래스형 컴포넌트로 변환해보겠습니다. 클래스형 컴포넌트를 만들 때 React.Component를 상속받고 render() 메소드를 구현해야 하는 것을 유의하며 변환해야 합니다. HTML 요소 자체는 그대로 사용하면 됩니다.
class Clock extends React.Component {
  render() {
    return (
      <div>
        <h1>{this.props.date.toLocaleTimeString()}.</h1>
      </div>
    );
  }
}
마지막으로 State로 구현한 결과를 살펴봅시다. render() 메소드에서 props를 state로 바꿔주고, 클래스 내에 초기 this.state를 지정하는 constructor()를 추가합니다. this.state에 실제 시간이 입력되어야 합니다. 그리고 실제로 렌더링을 하는 ReactDOM.render()을 작성해줍니다. 기존의 tick 컴포넌트와 다르게 더 이상 필요없는 date props는 지우고 작성하면 됩니다.
class Clock extends React.Component {
  constructor(props) {
    super(props);
    this.state = {date: new Date()};
  }

  render() {
    return (
      <div>
        <h1>{this.state.date.toLocaleTimeString()}.</h1>
      </div>
    );
  }
}

ReactDOM.render(
  <Clock />,
  document.getElementById('root')
);
Props vs State
Props와 State의 가장 큰 차이로 Props는 부모 컴포넌트에서 자식 컴포넌트로 전달하는 값으로 자식 컴포넌트에서는 Props를 직접 수정할 수 없지만 State는 컴포넌트 내부에서 선언하며 내부에서 관리되는 값으로 값을 변경할 수 있다는 점이 있습니다.

따라서 값이 변경되어야하는 상황, 예를 들면 매초 변하는 시간을 출력해야 하거나 버튼 클릭시 값이 변하는 것을 출력해야 한다면 State를 사용해야 합니다. 정리하자면 Props는 읽기 전용으로 수정이 불가능하고, State는 원하는 경우 수정이 가능하기 때문에 상황에 따라 알맞은 것을 사용하면 됩니다.

----------------------------------------------------------

9. props는 부모 컴포넌트에서 자식 컴포넌트로 전달하는 값으로 자식 컴포넌트에서는
   props를 직접 수정할 수 없지만 state는 컴포넌트 내부에서 선언하며
   내부에서 관리되는 값으로 값으르 변경할 수 있다

-----------------------------------------------------------
setState()
앞서 배운 State의 값을 변경하기 위한 메소드에 대해 알아봅시다. State를 변경하기 위해서는 직접 값을 수정하는 것이 아니라 setState() 메소드를 이용해야 합니다. 아래는 버튼 클릭 시 출력되는 텍스트가 red에서 blue로 수정되는 코드입니다. 참고로 시간이 변하는 것처럼 주기적으로 발생하는 것이 아니라 버튼 클릭과 같은 특정 이벤트로 상태가 변하는 것을 State가 비동기적으로 변경된다고 합니다.

class Change extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      color: "red"
    };
  }
  changeColor = () => {
    this.setState({color: "blue"});
  }
  render() {
    return (
      <div>
        <h1>It is a {this.state.color}</h1>
        <button
          type="button"
          onClick={this.changeColor}
        >Change color</button>
      </div>
    );
  }
}
생명주기
클래스 컴포넌트에 적용되는 생명주기(Life cycle)에 대해 알아봅시다. 생명주기란 앱이 실행되고 종료되는 과정을 특정 시점 별로 나눠둔 것을 말합니다. 파이썬의 클래스 객체로 예를 들면, 클래스가 생성되면 생성자가 호출되고 소멸되면 소멸자가 호출됩니다. 간단하지만 이러한 요소의 시작과 끝이 바로 생명주기입니다.

React의 생명주기
React의 생명주기는 컴포넌트가 이벤트를 다룰 수 있는 특정 시점을 말하며 마운트, 업데이트, 언마운트 상태로 구성되어 있습니다. 컴포넌트가 실제 DOM에 삽입되는 것을 마운트, 컴포넌트가 변하는 것을 업데이트, 컴포넌트가 DOM 상에서 제거되는 것을 언마운트라고 합니다. 특정 시점별 호출되는 생명주기 메소드에 대해 알아봅시다.

생명주기 메소드
React의 생명주기 메소드는 다음과 같은 것들이 있습니다.

constructor(): State 데이터를 초기화 하는 메소드
render(): 클래스 컴포넌트에서 반드시 구현되어야 하는 메소드
componentDidMount(): 컴포넌트가 마운트 된 직후 호출되는 메소드
componentDidUpdate(): 업데이트가 진행된 직후에 호출되는 메소드
componentWillUnmount(): 컴포넌트가 마운트 해제되어 제거되기 직전에 호출되는 메소드
아래는 componentDidMount()를 사용한 예시입니다. 마운트 직후 해당 함수가 호출되면서 표시된 색깔이 red에서 yellow로 변경됩니다. 참고로 setTimeout()을 이용해서 실행이 되는 타이머를 설정할 수 있습니다. 따라서 현재 코드를 실행하면 처음에는 red가 표시되다가 1초 뒤에 yellow로 변하게 됩니다.

class Header extends React.Component {
  constructor(props) {
    super(props);
    this.state = {favoritecolor: "red"};
  }
  componentDidMount() {
    setTimeout(() => {
      this.setState({favoritecolor: "yellow"})
    }, 1000)
  }
  render() {
    return (
      <h1>My Favorite Color is {this.state.favoritecolor}</h1>
    );
  }
}

ReactDOM.render(<Header />, document.getElementById('root'));
아래는 실행 결과를 확인해보세요.

출력 결과
image

언제 사용하나요?
만약 동적인 앱을 만들고 싶다면 이러한 생명주기에 대해서 잘 알아야 합니다. 예를 들어 사용자가 특정 행동을 완료할 때마다 알림을 주고 싶다면 컴포넌트가 마운트 된 이후 호출되는 componentDidMount() 메소드를 이용해 알림을 줄 수가 있습니다. 즉 원하는 시점에 따라 컴포넌트가 다른 동작을 실행하길 원한다면, 생명주기 메소드에 대해서 잘 알고 있어야 합니다.

---------------------------------------------------

10. state를 변경하기 위해서는 직접 값을 수정하는 것이 아니라 setState() 메소드를 이용해야 한다

11. React의 생명주기
 - 생명주기란 컴포넌트가 이벤트를 다룰 수 있는 특정 시점을 말한다
 - 컴포넌트가 실제 dom에 삽입되는 것을 마운트라고 한다
 - 컴포넌트가 변하는 것을 업데이트라고 한다
 - 마운트, 업데이트, 언마운트 상태로 구성되어 있으며,
   컴포넌트가 dom 상에서 제거되는 것을 언마운트라고 한다








