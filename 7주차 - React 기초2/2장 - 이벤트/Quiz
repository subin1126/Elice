1. 이벤트 핸들링
 - 이벤트 핸들링 함수를 할당하는 방법에는 핸들링 함수를 선언하고
   Element에 할당하는 방법과 Element 자체에 익명 함수를 작성해 전달하는 방법이 있다
 - 이벤트는 사용자의 행동 뿐만 아니라 개발자의 의도한 로직에 의해 발생할 수도 있다

2. 이벤트 Object 설명
 - 이벤트 Object는 이벤트가 발생된 원인, 이벤트가 일어난 Element에 대한 정보를 얻을 수 있다
 - DOM Element의 이벤트는 기본적으로 이벤트 Object를 핸들링 함수에 전달한다
 - 이벤트 형태(클릭, 키 입력 등)와 dom 종류(button, form, input 등)에 따라
   전달되는 이벤트 Object의 내용도 다르니 유의할 것

3. 이벤트 핸들링 함수는 한개만 선언해서 여러 Element에 재사용하여 코드를 효율적으로 작성할 수 있다

4. 이벤트 핸들링 함수 역시 자바스크립트 표현이므로
   부모 컴포넌트에서 자식 컴포넌트로 전달하여 활용하는 것이 가능하다

5. DOM 이벤트
 - onClick : 엘리먼트를 클릭했을 때 발생한다
 - onSubmit : Form 엘리먼트가 Submit 했을 때 발생한다
 - onChange : 엘리먼트의 내용이 변경되었을 때 발생한다
 - onKeyPress : 사용자가 키보드를 눌렀을 때 발생하는 이벤트이다

------------------------------------------------------

이벤트 처리하기
이벤트란 유저 행동의 결과 혹은 시스템에 의해 발생되는 일을 말합니다.
앞서 배운 HTML에서 사용한 이벤트를 React에서도 동일한 작업을 수행 할 수 있습니다.
HTML에서 사용했던 이벤트를 다시 확인해보세요.
우리가 배운 click 이벤트나 change이벤트, mouseover 이벤트 등 React는 HTML과 동일한 이벤트를 가지고 있습니다.

React 이벤트 특징
리액트에서 이벤트의 이름은 카멜(Camel) 표기법으로 사용합니다.
여기서 나오는 카멜 표기법에서 카멜은 ‘낙타’ 라는 의미입니다. 말그대로 낙타의 등모습을 닮았습니다. 카멜표기법은 두 단어로 이루어진 단어에서 두 번째 단어의 시작을 대문자로 표기하는 것입니다. 예를 들어 onclick으로 표기하는 것이 아니라 onClick으로 표기하는 것입니다.

      <input
        type="text"
        name="message"
        placeholder="input message"
        onchange={ // 🚨 이렇게 작성하면 안됩니다!!! 🚨→ onChange로 수정해야 합니다.
          (e) => {
            console.log(e.target.value);
            setMessage(e.target.value);
          }
        }
        value={message}
      />
전체 코드 살펴보기
import React, { useState } from "react";
import "./App.css";

function App() {
  const [message, setMessage] = useState("");

  return (
    <div>
      <input
        type="text"
        name="message"
        placeholder="input message"
        onchange={
          // 🚨 이렇게 작성하면 안됩니다!!! 🚨→ onChange로 수정해야 합니다.
          (e) => {
            console.log(e.target.value);
            setMessage(e.target.value);
          }
        }
        value={message}
      />
      <div>{message}</div>
    </div>
  );
}

export default App;


이벤트에 실행할 코드 전달 (X) 함수 형태의 객체를 전달 (O)
이벤트를 실행할 코드를 그대로 전달하는 것이 아니라 아래 onClick처럼 함수의 형태로 객체를 전달합니다.

    <button
      onClick={() => {
        console.log(data);
      }}
    >
      콘솔을 확인해보세요!
    </button>
전체 코드 살펴보기
import React from "react";
import "./App.css";

function App() {
  var data = "데이터 출력";

  return (
    <button
      onClick={() => {
        console.log(data);
      }}
    >
      콘솔을 확인해보세요!
    </button>
  );
}

export default App;


DOM요소에만 이벤트 설정 가능
직접 만든 리액트 컴포넌트에는 이벤트를 자체적으로 설정할 수 없습니다. <div> <button> <p> <input> 등 DOM요소에만 이벤트를 사용할 수 있습니다.

아래와 같이 직접 만든 <EventPractice>에는 이벤트를 사용해도 적용이 되지 않습니다.

  return ( // 해당 이벤트는 동작하지 않습니다.
    <EventPractice
      onclick={() => {
        console.log(data);
      }}
    />
  );
전체 코드 살펴보기
import React from "react";
import "./App.css";

function EventPractice() {
  return <button>테스트 버튼</button>;
}

function App() {
  var data = "데이터 출력";

  return (
    <EventPractice
      onclick={() => {
        console.log(data);
      }}
    />
  );
}

export default App;
이벤트 작성하기
function키워드를 사용해 이벤트 함수를 작성합니다.
onClick={함수명}으로 등록한 이벤트를 호출합니다.
function ActionLink() {
  function handleClick(e) { // 클릭 시, console창에 문구를 출력하는 이벤트 함수
    console.log("The link was clicked.");
  }

  return (
    <a href="#" onClick={handleClick}>
      Click me
    </a>
  );
}
전체 코드 살펴보기
import React from "react";
import "./App.css";

function ActionLink() {
  function handleClick(e) {
    console.log("The link was clicked.");
  }

  return (
    <a href="#" onClick={handleClick}>
      Click me
    </a>
  );
}

function App() {
  return <ActionLink />;
}

export default App;
이벤트 핸들링 하기
1. 함수로 작성하여 핸들링 하기

함수의 형태로 객체를 넘기기 때문에 함수 형태로 작성해야 합니다.

    //버튼 클릭 시, 실행되는 이벤트 함수
    <button
      onClick={() => {
        alert(message);
        setMessage("changed");
      }}
    >
      클릭
    </button>
전체 코드 살펴보기
import React, { useState } from "react";
import "./App.css";

function App() {
  let [message, setMessage] = useState("msg");
  return (
    <button
      onClick={() => {
        alert(message);
        setMessage("changed");
      }}
    >
      클릭
    </button>
  );
}

export default App;


2. 함수 미리 작성 후, 핸들링

미리 작성한 함수를 전달하여 핸들링도 가능합니다. 전달되는 함수의 형태에 주목하시기를 바랍니다.

  //버튼 클릭 시, 실행되는 이벤트 함수
  function handleClick() {
    alert(message);
    setMessage("changed");
  }

  return <button onClick={handleClick}>클릭</button>;
전체 코드 살펴보기
import React, { useState } from "react";
import "./App.css";

function App() {
  let [message, setMessage] = useState("msg");

  function handleClick() {
    alert(message);
    setMessage("changed");
  }

  return <button onClick={handleClick}>클릭</button>;
}

export default App;
이벤트 핸들러에 인수 전달하기
이벤트 핸들러에 인수를 전달하기 위해서는 콜백 함수의 형태로 작성해야 합니다.

<button onClick={() => deleteRow(id)}>Delete Row</button>
전체 코드 살펴보기
import React from "react";
import "./App.css";

function App() {
  function deleteRow(id) {
    console.log("deleted id: " + id);
  }
  let id = 4;
  return <button onClick={() => deleteRow(id)}>Delete Row</button>;
}

export default App;

--------------------------------------------


조건부 렌더링(Conditional rendering) 알아보기
조건이라고 생각하면 가장 먼저, if문이 떠오릅니다. 자바스크립트에서 사용한 if문처럼 컴포넌트 안에서 사용하는 방법과 JSX를 사용하여 인라인으로 조건문을 처리하는 방법을 학습해보겠습니다. 덧붙여, 컴포넌트가 렌더링되는 것을 막는 방법에 대해서도 학습해보도록 하겠습니다.

조건문으로 구현하기
아래 코드를 확인하면, UserGreeting과 GuestGreeting이라는 컴포넌트가 만들어진 것을 볼 수 있습니다. 우리가 알아보고자하는 것은 조건부 렌더링입니다. 즉, 조건에 따라서 렌더링이 되어야 하는 것입니다.

예를 들어서 가장 쉽게 접할 수 있는 로그인 기능을 생각해봅시다. 로그인의 여부에 따라서 사용자에게 보여지는 화면이나 메세지는 달라야 합니다. 이미 가입된 사용자라면 “어서오세요!” 라는 문구가 나와야 하고, 가입되지 않은 사용자라면 “처음오셨군요! 회원 가입 부탁드려요.” 라는 문구가 나와야 합니다. 바로 그 컴포넌트가 아래 코드입니다.

function UserGreeting(props) { //유저일 때 보여주는 컴포넌트
  return <h1>Welcome back!</h1>;
}

function GuestGreeting(props) { //게스트일 때 보여주는 컴포넌트
  return <h1>Please sign up.</h1>;
}
따라서, 유저일 때는 UserGreeting컴포넌트를 렌더링 해야하고, 유저가 아닐 때는 GuestGreeting컴포넌트를 렌더링해야 합니다. 이렇게 조건에 따라서 컴포넌트를 다르게 렌더링하는 컴포넌트를 만드는 방법을 알아보겠습니다.

1. 조건문 사용하기
조건문 if를 사용하여 렌더링하는 방법을 알아보겠습니다.

function App(props) { //인사하는 컴포넌트 선언
  const isLoggedIn = props.isLoggedIn; //props에서 받아온 isLoggedIn값을 isLoggedIn 변수에 할당
  if (isLoggedIn) { //할당한 변수의 값을 if문으로 확인 (= 조건별로 구분하기)
    return <UserGreeting />; //true일 때 실행되는 컴포넌트
  }
  return <GuestGreeting />; //false일 때 실행되는 컴포넌트
}
전체 코드 살펴보기
App.js

import React from "react";
import "./App.css";

function UserGreeting(props) { //유저일 때 보여주는 컴포넌트
  return <h1>Welcome back!</h1>;
}

function GuestGreeting(props) { //게스트일 때 보여주는 컴포넌트
  return <h1>Please sign up.</h1>;
}

function App(props) { //인사하는 컴포넌트 선언
  const isLoggedIn = props.isLoggedIn; //props에서 받아온 isLoggedIn값을 inLoggedIn 변수에 할당
  if (isLoggedIn) { //할당한 변수의 값을 if문으로 확인 (= 조건별로 구분하기)
    return <UserGreeting />; //true일 때 실행되는 컴포넌트
  }
  return <GuestGreeting />; //false일 때 실행되는 컴포넌트
}

export default App;
index.js

import React from "react";
import ReactDOM from "react-dom";
import "./index.css";
import App from "./App";

ReactDOM.render( //isLoggedIn={true}; 로 하면 어떤 컴포넌트가 실행될지 생각해보세요!
  <App isLoggedIn={false} />, //Greeting이라는 컴포넌트를 불러올 때, isLoggedIn이라는 props를 주고, props의 false 값을 할당합니다.
  document.getElementById("root")
);
2. element variables
react element를 변수에 저장할 수 있습니다.

아래 코드를 확인하면 LoginButton과 LogoutButton 총 2가지 버튼이 있는 것을 확인할 수 있습니다. 확인하면, 내용만 다릅니다. 버튼의 내용이 Login이고, Logout이죠. 또 로그인 기능을 생각하며 코드를 살펴봅시다. 만약, 내가 로그인을 했다면 LogoutButton이 보여야 하고, 로그인을 해야 한다면 LoginButton이 보여야 합니다.

function LoginButton(props) { //로그인 버튼
  return (
    <button onClick={props.onClick}>
      Login
    </button>
  );
}

function LogoutButton(props) { //로그아웃 버튼
  return (
    <button onClick={props.onClick}>
      Logout
    </button>
  );
}
간편하게 다른 컴포넌트를 보여주고 싶은 경우에는 변수에 저장을 하여 보여주는 방법이 있습니다. 인사말을 출력하는 컴포넌트 Greeting과 출력되는 버튼을 같이 컨트롤합니다. 유저가 로그인을 하면 “어서오세요!” 라는 메세지가 보이면서 동시에 로그아웃 버튼이 보여야하고, 로그아웃을 하면 “처음오셨군요! 회원 가입 부탁드려요.” 라는 메세지가 보이면서 동시에 로그인 버튼이 보여야 합니다. 이러한 로직을 구현한 코드가 아래 코드입니다. 주석과 함께 확인해보세요.

function App(props) {
  let [isLoggedIn, setIsLoggedIn] = useState(false);

  function handleLoginClick() {
    setIsLoggedIn(true);
  }

  function handleLogoutClick() {
    setIsLoggedIn(false);
  }

  let button; //버튼 변수 선언 (바로, 이 변수가 element variables 입니다.) 컴포넌트를 이 변수에 할당할 수 있다는 의미입니다. 

  if (isLoggedIn) {
    button = <LogoutButton onClick={handleLogoutClick} />; //로그인 상태일 경우, button변수에 LogoutButton 엘리먼트를 할당
  } else {
    button = <LoginButton onClick={handleLoginClick} />; //로그 아웃 상태일 경우, button변수에 LoginButton 엘리먼트를 할당
  }

  return (
    <div>
      <Greeting isLoggedIn={isLoggedIn} /> {/* Greeting 컴포넌트를 보여주고 있다. */}
      {button} {/* button 엘리먼트를 렌더링하고 있다. */}
    </div>
  );
전체 코드 살펴보기
import React, { useState } from "react";
import "./App.css";

function UserGreeting(props) { //유저일 때 보여주는 컴포넌트
  return <h1>Welcome back!</h1>;
}

function GuestGreeting(props) { //게스트일 때 보여주는 컴포넌트
  return <h1>Please sign up.</h1>;
}

function Greeting(props) { //인사하는 컴포넌트 선언
  const isLoggedIn = props.isLoggedIn; //props에서 받아온 isLoggedIn값을 inLoggedIn 변수에 할당
  if (isLoggedIn) { //할당한 변수의 값을 if문으로 확인 (= 조건별로 구분하기)
    return <UserGreeting />; //true일 때 실행되는 컴포넌트
  }
  return <GuestGreeting />; //false일 때 실행되는 컴포넌트
}

function LoginButton(props) { //로그인 버튼
  return <button onClick={props.onClick}>Login</button>;
}

function LogoutButton(props) { //로그아웃 버튼
  return <button onClick={props.onClick}>Logout</button>;
}

function App(props) {
  let [isLoggedIn, setIsLoggedIn] = useState(false);

  function handleLoginClick() {
    setIsLoggedIn(true);
  }

  function handleLogoutClick() {
    setIsLoggedIn(false);
  }

  let button; //버튼 변수 선언 (바로, 이 변수가 element variables 입니다.) 컴포넌트를 이 변수에 할당할 수 있다는 의미입니다. 

  if (isLoggedIn) {
    button = <LogoutButton onClick={handleLogoutClick} />; //로그인 상태일 경우, button변수에 LogoutButton 엘리먼트를 할당
  } else {
    button = <LoginButton onClick={handleLoginClick} />; //로그 아웃 상태일 경우, button변수에 LoginButton 엘리먼트를 할당
  }

  return (
    <div>
      <Greeting isLoggedIn={isLoggedIn} /> {/* Greeting 컴포넌트를 보여주고 있다. */}
      {button} {/* button 엘리먼트를 렌더링하고 있다. */}
    </div>
  );
}

export default App;
3. JSX로 구현하기
이번에는 react의 특징인 JSX를 사용하여 조건부 렌더링하는 방법을 알아보겠습니다.

&& 연산자 사용하기

&& 연산자는 자바스크립트의 연산자이기 때문에 { }을 사용해야 합니다. &&연산자는 리액트 엘리먼트를 렌더링 여부를 결정할 때 사용할 수 있는 간단한 연산자입니다. 아래 컴포넌트 코드를 보고 어떻게 구현을 하였는지 살펴보겠습니다.

function App(props) { //Mailbox라는 function component 선언
  const unreadMessages = props.unreadMessages; //읽지 않은 메세지 값을 받아 unreadMessages 변수에 할당
  /* 조건부 렌더링 부분! */
  return (
    <div>
      <h1>Hello!</h1>
      {/*이 부분이 true이면 렌더링, false면 렌더링 하지 않는다.*/}
      {unreadMessages.length >
        0 /* unreadMessages 의 길이가 0보다 크면 아래 <h2> 태그를 렌더링 */ && (
        <h2>You have {unreadMessages.length} unread messages.</h2>
      )}
    </div>
  );
}
그리고 아래와 같이 배열을 Props로 전달합니다.

const messages = ["React", "Re: React", "Re:Re: React"]; //messages 배열에 3가지 값을 담았습니다.
ReactDOM.render(
  <App unreadMessages={messages} />, // props 값을 받는다.
  document.getElementById("root")
);
전체 코드 살펴보기
App.jsx

import React, { useState } from "react";
import "./App.css";

function App(props) { //Mailbox라는 function component 선언
  const unreadMessages = props.unreadMessages; //읽지 않은 메세지 값을 받아 unreadMessages 변수에 할당
  /* 조건부 렌더링 부분! */
  return (
    <div>
      <h1>Hello!</h1>
      {/*이 부분이 true이면 렌더링, false면 렌더링 하지 않는다.*/}
      {unreadMessages.length >
        0 /* unreadMessages 의 길이가 0보다 크면 아래 <h2> 태그를 렌더링 */ && (
        <h2>You have {unreadMessages.length} unread messages.</h2>
      )}
    </div>
  );
}

export default App;

index.js

import React from "react";
import ReactDOM from "react-dom";
import "./index.css";
import App from "./App";

const messages = ["React", "Re: React", "Re:Re: React"]; //messages 배열에 3가지 값을 담았습니다.
ReactDOM.render(
  <App unreadMessages={messages} />, // props 값을 받는다.
  document.getElementById("root")
);
3항 연산자로 조건부 렌더링 구현하기

3항 연산자로 간단하게 구현할 수 있습니다.

  return (
    <div>
    {/* 중괄호 안에서 isLoggedIn이 true이며 LogoutButton 컴포넌트를 렌더링, false면 LoginButton 컴포넌트를 렌더링 */}
      {isLoggedIn ? ( 
        <LogoutButton onClick={handleLogoutClick} />
      ) : (
        <LoginButton onClick={handleLoginClick} />
      )}
    </div>
  );
전체 코드 살펴보기
import React, { useState } from "react";
import "./App.css";

function LoginButton(props) { //로그인 버튼
  return <button onClick={props.onClick}>Login</button>;
}

function LogoutButton(props) { //로그아웃 버튼
  return <button onClick={props.onClick}>Logout</button>;
}

function App() {
  let [isLoggedIn, setIsLoggedIn] = useState(false);

  function handleLoginClick() {
    setIsLoggedIn(true);
  }

  function handleLogoutClick() {
    setIsLoggedIn(false);
  }

  return (
    <div>
    {/* 중괄호 안에서 isLoggedIn이 true이며 LogoutButton 컴포넌트를 렌더링, false면 LoginButton 컴포넌트를 렌더링 */}
      {isLoggedIn ? ( 
        <LogoutButton onClick={handleLogoutClick} />
      ) : (
        <LoginButton onClick={handleLoginClick} />
      )}
    </div>
  );
}

export default App;

---------------------------------------------------------


Lists and Keys
여러가지 컴포넌트를 리스트로 구성하는 방법에 대해 학습하도록 하겠습니다. 여기서 주의할 점은 여러가지 컴포넌트가 동시에 렌더링이 되기 때문에 컴포넌트를 구분하기 위해서는 key값이 필요합니다. 여기서 key가 무엇이고 어떤 역할을 하는지 함께 알아보도록 하겠습니다.

const numbers = [1, 2, 3, 4, 5]; //numbers라는 arrary, 1~5까지 아이템이 존재한다.
const doubled = numbers.map(number => number * 2); //각 아이템의 2배를 저장
console.log(doubled); // 결과: [2, 4, 6, 8, 10]
위 코드를 돌려보면 console에 [2, 4, 6, 8, 10]이 출력되는 것을 확인할 수 있습니다. 리액트에서 컴포넌트로 리스트를 구성하는 것도 이와 비슷합니다.

리스트 만들기
1, 2, 3, 4, 5가 들어있는 numbers 변수를 표현하고 있는 number이라는 리액트 엘리먼트는 즉, 컴포넌트의 리턴 값입니다. 그 리턴 값을 할당하고 있는 변수는 listItems입니다.

const numbers = [1, 2, 3, 4, 5];
const listItems = numbers.map(number =>
  <li>{number}</li> /*컴포넌트의 리턴 값*/
);
그럼 array의 리턴 값을 할당하고 있는 변수 listItems는 아래 코드에서 보시다시피 <ul> 이라는 html태그 안에서 {}를 사용하여 표현할 수 있습니다. 왜냐하면 앞서 JSX에서 학습했다시피 {} 안에서는 어떠한 자바스크립트 표현도 가능합니다.

따라서, numbers 배열을 map()을 통해서 컴포넌트들의 array로 바꾼 상태입니다. 그 값을 listItems가 할당하고, <ul>태그 안에서 사용하게 됩니다.

ReactDOM.render(
  <ul>{listItems}</ul>, /*컴포넌트의 리턴 값 출력*/
  document.getElementById('root')
);
이번에는 컴포넌트들로 구성된 리스트를 반환하는 컴포넌트를 만들어보겠습니다.

function NumberList(props) { /*리액트 엘리먼트를 반환하는 NumberList라는 function 컴포넌트*/
  const numbers = props.numbers; /*위에서 사용했던 array를 props 받아와 numbers 변수에 할당*/
  const listItems = numbers.map(number => /*map()을 통해 숫자를 컴포넌트로 변환*/
    <li>{number}</li>
  );
  return (
    <ul>{listItems}</ul> /*컴포넌트로 반환한 값을 반환*/
  )
}

const numbers = [1, 2, 3, 4, 5];
ReactDOM.render(
  <NumberList numbers={numbers} />,
  document.getElementById('root')
);
다만, 이 코드를 실행했을 때는 경고가 나오게 됩니다. 리스트 안에는 <li>가 만들어낸 리액트 엘리먼트가 여러 개 들어가 있습니다. 그 엘리먼트끼리 구별이 가지 않습니다. 리액트의 입장에서 엘리먼트 내 들어가있는 값을 동일하게 인식합니다. 그렇다면 어떻게 구별을 해주어야 할까요?

바로, key값을 추가해야 합니다! 태그에는 key값을 부여할 수 있는데, 리액트의 입장에서 key값을 통해 구분할 수 있습니다. key는 string값을 가지는 props입니다. 따라서, 태그마다 유니크한 key값을 주어야 합니다.

function NumberList(props) {
  const numbers = props.numbers;
  const listItems = numbers.map((number) =>
    <li key={number.toString()}>/*li태그에 직접 key값을 부여*/
      {number}
    </li>
  );
  return (
    <ul>{listItems}</ul>
  );
}

const numbers = [1, 2, 3, 4, 5];
ReactDOM.render(
  <NumberList numbers={numbers} />,
  document.getElementById('root')
);
Keys
위에서 잠깐 언급된 key에 대해 더 자세히 학습해보겠습니다. key는 리스트의 각 아이템이 추가되거나, 수정, 삭제될 때 리액트의 입장에서 빠르게 알아차릴 수 있도록 도와주는 역할을 합니다.

key는 map()이 실행될 때 주어져야 합니다. 이에 대한 설명은 아래에서 다루도록 하겠습니다.

const numbers = [1, 2, 3, 4, 5];
const listItems = numbers.map((number) => /*map() 실행*/
  <li key={number.toString()}> /*key값 부여*/
    {number}
  </li>
);
가장 좋은 key값을 부여하는 방법은 다른 엘리먼트들과 다른 UNIQUE한 string값을 부여하는 것 입니다.
대부분, 데이터의 id값을 key값으로 부여합니다.

const todoItems = todos.map((todo) =>
//<li>의 key값으로 todo.id라고, id값을 부여한 것을 확인할 수 있습니다.
  <li key={todo.id}> 
    {todo.text}
  </li>
);
만약, 변하지 않고 고정적인 key 값을 부여하는 것이 정말! 어렵다면 index를 사용하여 부여합니다.

const todoItems = todos.map((todo, index) =>
  // index를 이용하여 key값 부여하기
  <li key={index}>
    {todo.text}
  </li>
);
하지만, 그럴 경우 문제가 생길 수도 있습니다. array내 아이템의 순서가 바뀔 수도 있기 때문입니다.

index를 key값으로 부여할 경우 좋지 않은 이유 알아보기
https://robinpokorny.medium.com/index-as-a-key-is-an-anti-pattern-e0349aece318

더 자세히 알고 싶다면 왜 키가 필요한가? 에 대해 더 알아보세요. :)
https://reactjs-kr.firebaseapp.com/docs/reconciliation.html#recursing-on-children

key로 컴포넌트 추출하기
우리가 key값을 부여할 때는 컴포넌트들을 아이템으로 가지고 있는 리스트 컴포넌트를 렌더링하고 싶을 때 사용합니다. 예를 들어서, 아래 코드의 ListItem 컴포넌트를 추출한 경우, ListItem 자체의 <li> 컴포넌트 요소가 아닌 배열의 <ListItem /> 컴포넌트가 키를 가지고 있어야 합니다.

🔽 키 값을 잘 못 부여한 경우

function ListItem(props) {
  const value = props.value;
  return (
    // 키를 지정할 필요가 없습니다! : 배열값을 반환하지 않기 때문이죠.
    <li key={value.toString()}>
      {value}
    </li>
  );
}

function NumberList(props) {
  const numbers = props.numbers;
  const listItems = numbers.map((number) =>
    // 키 값을 지정해야합니다! : 배열값을 반환하기 때문이죠.
    <ListItem value={number} />
  );
  return (
    <ul>
      {listItems}
    </ul>
  );
}

const numbers = [1, 2, 3, 4, 5]; //배열
ReactDOM.render(
  <NumberList numbers={numbers} />,
  document.getElementById('root')
);
🔽 키 값을 올바르게 부여한 경우

function ListItem(props) {
  // 배열값을 반환하지 않으니, 키 값을 지정하지 않습니다!
  return <li>{props.value}</li>;
}

function NumberList(props) {
  const numbers = props.numbers;
  const listItems = numbers.map((number) =>
    // 배열값을 반환하므로, 키 값을 지정합니다!
    <ListItem key={number.toString()}
              value={number} />

  );
  return (
    <ul>
      {listItems}
    </ul>
  );
}

const numbers = [1, 2, 3, 4, 5];
ReactDOM.render(
  <NumberList numbers={numbers} />,
  document.getElementById('root')
);
JSX에서 map() 포함하기
아래 코드에서는 listItems변수에 컴포넌트의 배열을 할당하고 JSX안에 그 변수를 {listItems} 형태로 작성한 것을 볼 수 있습니다.

function NumberList(props) {
  const numbers = props.numbers;
    //listItems를 선언하고, JSX에 포함
  const listItems = numbers.map((number) =>
    <ListItem key={number.toString()}
              value={number} />
  );
  return (
    //{listItems} 형태로 출력
    <ul>
      {listItems}
    </ul>
  );
}
여기서! JSX는 {}를 이용하면 어떠한 자바스크립트 표현식을 넣을 수 있기 때문에 map() 또한, 넣을 수 있습니다.

function NumberList(props) {
  const numbers = props.numbers;
  return (
    <ul>
      {numbers.map((number) =>
        <ListItem key={number.toString()}
                  value={number} />
      )}
    </ul>
  );
}
때론 map()전체를 JSX 안에 넣으면 코드가 깔끔해질 수도 있습니다. 개발을 하실 때, 가독성이 더 좋은 방향으로 판단하여 작성하시면 됩니다. map()이 너무 중첩되어있다면, 컴포넌트로 추출하는 것이 더 좋습니다.


------------------------------------------------------



