1. 자바스크립트 비동기
 - 비동기 처리 시 main thread가 여유가 있을 때에만 event loop가 task queue에서 task를 꺼낸다
 - event loop는 main thread로부터 제어권을 받아야 task queue를 체크할 수 있다
 - 동기 코드는 main thread를 블록할 수 있다
 - 동기 코드는 main thread에 의해 실행되므로, 무한루프 등에 의해 main thread를 블록할 수 있다
 - 비동기 코드가 task queue에 넣어져 실행된다
   동기 코드는 바로 call back에 넣어진다
 - 브라우저의 main thread는 자바스크립트 코드 파싱 외에 다른 일들도 처리한다
 - call stack이 비워지고 main thread에 여유가 있을 떄 event loop는 task queue에서 task를 뺴낸다
 - event loop는 기존에 task queue에 존재했던 task들만을 처리하며,
   새롭게 들어온 task들은 다음 iteration에 처리된다

2. Promise
 - fulfilled, rejected 두 상태는 settled 된 상태이다
 - catch 이후에도 핸들러는 정상적으로 실행된다
 - resolved, rejected 된 Promise에도 계속 핸들러를 붙일 수 있다
 - Promise.any는 기다리는 Promise 중 하나라도 fulfilled되면 fulfilled된다
 - Promise.all이 기다리는 Promise 중 하나라도 reject되면,
   Promise.all이 리턴하는 Promise는 rejected 상태가 된다
 - Promise.race는 기다리는 Promise 중 하나라도 fulfilled or rejected 되면 settled 된다
 - fulfilled : 비동기 실행을 성공적으로 마친 상태이다
 - rejected : 비동기 실행 도중 발생한 문제로 비동기 실행이 실패한 상태이다


3. async/await
 - 상황에 따른 에러 처리를 할 수 있다
 - 복잡한 비동기의 경우 Promise 함수와의 연계가 필요하다
 - await가 순차적으로 쓰이면, 그 이후의 구문은 .then()에 들어간 것처럼
   앞의 await가 완료되기를 기다린다
  
4. CORS
 - 브라우저는 API 요청에 Origin 헤더를 포함한다
 - 서버는 같은 Origin이 아닌 요청을 기본적으로 거부한다
   즉, 브라우저는 다른 origin의 서버에 대해 access-control-* 헤더를 요구하고,
   서버는 기본적으로 해당 헤더를 보내지 않는다
   허용하려면 별도로 cors 설정을 해주어야 한다
 - 서버에서 바꿀 수 없다면, 브라우저가 아닌 같은 origin의 proxy 서버 등으로
   요청을 보내 해결할 수 있다

5. 자바스크립트의 동기와 비동기
 - 동기 처리는 요청을 한 뒤 응답이 올 때까지 다른 작업을 수행하지 않는 것을 말한다
 - 동기 코드는 main thread를 블록해 다른 작업의 수행을 막을 수 있다
 - 비동기 처리를 위해서는 응답이 왔을 때 처리하는 함수를 만들어야 한다

6. Multiple Promise Handling
 - Promise.all() : 모든 프로미스가 fulfilled 되는 것을 기다린다
 - Promise.allSettled() : 모든 프로미스가 fulfilled 또는 rejected 되는 것을 기다린다
 - Promise.any() : 프로미스 중 하나라도 fulfilled 되는 것으르 기다린다

------------------------------------------------------

비동기 처리
API 호출 시 비동기 처리를 하지 않으면 API가 응답을 보내주기 전까지 프로그램이 진행되지 않을 것입니다. 앞서 배운 Axios도 .then을 이용한 콜백 함수의 형태로 비동기 처리를 한 것입니다. 하지만 복잡한 비동기 처리를 하기 위해서 .then을 이용한 콜백 함수를 자주 사용하면 가독성이 나빠집니다.

axios.get(`요청할 url 1`)
  .then(res => axios.get(`요청할 url 2`))
  .then(res => {
    const ps = res.data.map(user => axios.get(`요청할 url 3`));
    ···
  })
  .then(ress => ···)))
  .then(repoArrs => {
    ···
    }
    ···
  })
이러한 것을 콜백 지옥이라고 표현합니다. 콜백 지옥을 벗어나기 위해 async와 await를 이용할 수 있습니다. 즉, 콜백 함수와 .then을 사용하지 않고 비동기 처리를 할 수 있는 것입니다.

async / await
async와 await에 대해 살펴보기 전에 Promise가 무엇인지 알아봅시다. Promise란 비동기 처리에서 사용되는 객체로 Promise가 상태를 관리함으로써 다른 코드가 비동기적으로 실행될 수 있도록 해주는 객체입니다. 앞서 배웠던 Axios 역시 Promise를 기반으로 만들어진 것입니다. Promise에 대한 자세한 설명은 링크를 참고하세요!

이제 async와 await을 어떻게 사용해야 하는지 예시를 통해 살펴봅시다. 아래에는 2초 뒤 Promise 객체를 반환하는 함수 resolveAfter2Seconds 함수와 해당 함수를 호출하는 asyncCall 함수가 있습니다. resolveAfter2Seconds에서는 2초 뒤에 Promise 객체를 반환합니다. 여기서 resolve는 코드를 이행하는 것으로 resolved라는 문자열을 반환하게 됩니다.

function resolveAfter2Seconds() {
  return new Promise(resolve => {
    setTimeout(() => {
      resolve('resolved');
    }, 2000);
  });
}

async function asyncCall() {
  console.log('calling');
  const result = await resolveAfter2Seconds();
  console.log(result);
}

asyncCall();
코드 실행 후 asyncCall에는 calling을 콘솔창에 출력한 뒤, 2초 후 resolved를 출력합니다. 여기서 async, await 키워드가 사용되는 방법을 익혀두세요! async는 함수 이름 부분의 제일 앞에, await는 결과를 기다릴 함수 호출 부분 앞에 작성합니다.

async는 해당 함수에서 비동기 처리를 위한 Promise 동작을 한다는 것을 명시하는 것이고, await는 호출되는 함수가 적절한 결과를 반환할 때까지 기다리도록 동작합니다. 실질적인 동작은 await이고, awiat을 사용하기 위해 async를 명시해야 한다고 이해하시면 됩니다!

---------------------------------------------------------

7. async는 해당 함수에서 비동기 처리를 위한 Promise 동작을 한다는 것을 명시하는 것이고,
   await는 호출되는 함수가 적절한 결과를 반환할 때까지 기다리도록 동작한다
   실질적인 동작은 await 이고, await을 사용하기 위해 async를 명시해야 한다

---------------------------------------------------------

포켓몬 API란?
포켓몬 API는 Pokémon 메인 게임 시리즈에 등장하는 포켓몬들에 대한 모든 것을 자세히 설명하는 API입니다.

포켓몬 API 특징과 구조
HTTP GET 요청으로 API의 자원을 사용할 수 있습니다.
사용자가 입력한 값에 따라 포켓몬 이미지, 이름, 높이, 무게 정보를 확인할 수 있습니다.
만약 포켓몬 API에 없는 값 입력 시 404 에러를 반환합니다.
포켓몬 정보를 알려주는 API를 사용해서 우리는 이 중 하나의 포켓몬에 대한 정보를 읽어오는 애플리케이션을 만들어 보겠습니다. 그전에 Pokemon API의 구조를 살펴봅시다.

image

페이징이란 API 반환 결과를 한 번에 반환하지 않도록 나눠둔 것입니다. 위의 페이지 같은 경우 201번부터 300번까지의 검색 결과가 반환되고, 그 앞이나 뒤의 검색 결과를 가진 주소 정보를 가지고 있는 것입니다.

앞서 배웠던 Axios를 사용하여 포켓몬 OpenAPI에서 GET 요청 통해 사용자가 입력한 ID에 해당하는 포켓몬의 이름과 이미지를 표시하도록 PokéAPI를 사용해 구현할 것입니다. 자바스크립트로 구현된 아래 로직을 참고해보시기를 바랍니다.

import axios from 'axios';

var apiUrl = "https://pokeapi.co/api/v2/pokemon/"; // API 주소
var input = document.querySelector(".pokemon-input"); // 검색할 ID
var pokemonName = document.querySelector(".pokemon-name"); // 포켓몬 이름
var pokemonImage = document.querySelector(".pokemon-image"); // 포켓몬 사진

function getPokemonData() {
    axios.get(apiUrl + input.value)
    .then(function (response) {
        pokemonName.innerHTML = response.data.forms[0].name;
        pokemonImage.src = response.data.sprites.front_default;
    })
    .catch(function (error) {
        pokemonName.innerHTML = "(An error has occurred.)";
        pokemonImage.src = "";
    });
}
var button = document.querySelector(".pokemon-button");
button.addEventListener("click", getPokemonData);
이때, querySelector은 index.html에 있는 태그를 지정하는 것입니다. 그리고 innerHTML과 src를 이용해 API로 반환한 값인 포켓몬의 이름과 이미지를 바로 출력합니다. innerHTML는 텍스트이고 src는 이미지의 링크를 설정하는 <img> 태그의 속성으로 해당 이미지를 출력하는 것입니다.

코드 실행 시 PokéAPI를 호출하면 Axios를 사용하여 Pokémon의 ID와 함께 API URL에 GET 요청을 보내고 결과를 반환합니다. 예를들어 입력된 ID가 25이면 전체 URL은 https://pokeapi.co/api/v2/pokemon/25 와 같습니다.

최종 결과
image

이 애플리케이션의 데모를 먼저 확인해보세요. 그리고 해당 내용을 React를 통해 차근차근 구현해봅시다!


------------------------------------------------------

8. Promise와 async/await
 - Promise를 활용해 여러 비동기 요청의 순서를 조작하여 쉽게 처리할 수 있다
 - Promise를 이용할 때 비동기 실행이 완료된 후 `.then`, `.catch`, `.finally` 등의
   핸들러를 붙여 각각 데이터 처리, 에러 처리, 클린업 로직을 실행한다
 - async/await을 이용할 때 여러 개의 await을 순서대로 나열하여, then chain을 구현할 수 있다
 - async/await과 Promise.all()을 조합하여 병렬적(prallelism)으로 처리할 수 있다
 - catch 뒤에 계속 핸들러가 붙어있다면, 에러를 처리한 후에 계속 진행된다
   이때는 catch에서 리턴한 값이 then으로 전달된다

9. 

