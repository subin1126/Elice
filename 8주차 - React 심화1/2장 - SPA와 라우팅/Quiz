1. SPA
 - 네이게이션 시 리로드 없이 이동한다
 - spa는 단 하나의 페이지를 관리하며, 모든 라우트에서 해당 페이지를 내려주는 방식이다
 - spa는 모바일 앱을 사용하는 듯한 경험을 주기 위해
   자바스크립트와 history api 등의 web api를 이용,
   페이지 리로드 없는 네비게이션을 구현한다
 - spa는 페이지 요청 시 주로 빈 페이지를 전송하므로,
   서버에서 모든 페이지 정보를 렌더링하는 방식의 mpa보다는 seo에 불리하다
 - 페이지 이동 시 리로딩이 없어 유저에게 앱과 같은 경험을 준다
 - 서버 렌더링이 없어 CDN에 캐싱이 가능하다
 - SPA는 서버에 매번 요청을 하지 않고, 단 한번만 페이지를 받아 페이지 관련 네트워크 요청이 줄어든다
 
 - 하나의 페이지 요청으로 전체 웹앱으르 사용하는 방식을 말한다
   페이지 간의 이동 시 리로드를 거치지 않고 라우팅을 할 수 있으며,
   여러 페이지 간의 스타일과 컴포넌트를 간편하게 재활용 할 수 있다

2. react-router
 - url에서 path variable, query string을 얻을 수 있다
 - link는 anchor tag를 래핑한다
 - switch는 가장 위의 매칭되는 path의 컴포넌트를 렌더링한다
 - route안에 Route가 들어갈 경우 nested route로 구현한다
 - history.listen으로 이벤트 핸들러를 등록한다
 - 반드시 context 안에서만 browserRouter가 동작한다
 - useParams를 이용해 내부 컴포넌트에서도 params 객체를 사용할 수 있다
 - location 객체, 함수도 받을 수 있다
 - exact가 없을 경우, to prop으로 보낸 path가 포함되면 매칭된다

3. Private Route
 - 유저의 상세 페이지나 개인정보 변경 페이지를 만드는데 사용한다
 - 선언적(declarative) 방법과 명령적(imperative) 방법으로 만들 수 있다

4. SPA와 라우팅
 - SPA는 매번 페이지 요청을 할 필요가 없기 때문에 네트워크 요청이 줄어든다
 - SPA에서 라우팅을 하기 위해서 주로 useNavigate(useHistory) 혹은 url hash를 이용해 페이지 리로드 없는 페이지 전환을 구현한다
 - react-router와 같은 라이브러리를 활용하면 라우팅 관련 기능을 쉽게 사용할 수 있다
 - react-router를 이용해 컴포넌트를 특정 path와 연결하여,
   해당 path로 진입 시 컴포넌트를 렌더링하게 할 수 있다
 - spa는 csr 기술을 활용하는 것이다

