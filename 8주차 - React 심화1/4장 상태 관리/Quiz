1. 상태 관리
 - 앱의 복잡도를 높일 수 있다
 - 컴포넌트 하나의 상태, 여러 컴포넌트의 상태 등도 관리한다
 - 서버의 데이터를 변환하여 사용할 수도 있다

2. 상태 관리 기술이 해결하는 문제
 - 상위 컴포넌트가 하위 컴포넌트에 불필요하게 데이터를 전달하는 Prop Drilling 이슈를 해결한다
 - 변경이 잦은 데이터라면 상태관리 기술이 적합하지 않을 수 있다
 - 하나의 데이터를 여러 컴포넌트가 활용할 수 있다

--------------------------------------------------------


MVC Pattern
MVC Pattern이란 애플리케이션을 Model, View, Controller로 분리하여 개발하는 소프트웨어 디자인 패턴 중 하나입니다.

Flux Pattern
하나의 유저 인터렉션이 무조건 하나의 업데이트만 만들 수 있는 것은 아닙니다. 예를 들어 특정 버튼을 클릭했을 때 여러개의 액션을 만들 수 있기 때문입니다.
MVC 패턴의 경우, 하나의 유저 인터렉션 발생 시 그 인터렉션으로 발생한 업데이트가 다른 연쇄 업데이트를 만들어낼 수 있습니다. 따라서 업데이트의 근원을 추적하기 힘든 반면 Flux 패턴은 연쇄 업데이트가 아닌 단방향 업데이트만을 만들어낼 수 있습니다.

--------------------------------------------------------

3. Flux Pattern
 - Store는 Action을 이용한 데이터 업데이트 후 변경 이벤트를 만든다
 - mvc와 다르게, flux에서는 데이터 업데이트 시 한번의 업데이트만을 만든다
 - 하나의 유저 인터렉션에 여러 Action을 생성할 수 있다.
   예를 들어 특정 버튼을 클릭했을 때 여러개의 액션을 만들 수 있다

4. useRef의 상태가 바뀌어도 리렌더링 하지 않는다
   useReducer는 리듀서를 기반으로 상태를 업데이트 한다
   useContext를 위한 Context의 value가 바뀌면, 그 Context를 사용하는 모든 컴포넌트가 리렌더링 된다

5. useState
 - state를 조작하는 함수를 하위 컴포넌트로 넘겨야 한다
 - 컴포넌트의 동작이 복잡할수록 많은 함수를 넘겨야 한다
 - nested되었다고 하더라도, 변경이 있으면 리렌더링을 트리거 한다

6. useContext
 - 하위 컴포넌트에 dispatch만 넘기면 상태를 조작할 수 있다
 - useContext를 이용하여 상태를 받아올수도 있다
 - useState, useReducer 등 다른 훅과 함께 사용 가능하다

7. 상태관리 기술 장점
 - 성능이나 네트워크 최적화에 효과적으로 사용할 수 있다
 - 높은 품질의 코드를 작성하는 데 유리하다
 - 고도화된 데이터 관리가 가능하다

8. Flux 구조에서 데이터 흐름
action - dispatcher - store - view - action - ...

9. useReducer : 별도의 라이브러리 없이 flux pattern에 기반한 상태 관리를 구현한다
                nested state와 같은 복잡한 여러 개의 상태를 한번에 관리하거나
                어떤 상태에 여러 가지 처리를 적용할 때 유용하다
                복잡한 상태를 관리하거나, 상태에 대한 여러 처리가 필요한 상태를 정의할 때 사용한다
   useContext : 여러 컴포넌트에서 상태를 효율적으로 공유하기 위해서 사용한다
   useRef : 상태가 변경되어도 화면이 리렌더링되지 않는 상태를 정의할 때 사용한다
   useState : 비교적 간단한 상태를 정의할 때 사용한다

10. 
