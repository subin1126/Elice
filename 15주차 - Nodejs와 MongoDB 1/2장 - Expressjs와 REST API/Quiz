1. 미들웨어
 - 미들웨어는 HTTP 요청과 응답 사이에서 동작한다
 - 미들웨어는 HTTP 요청과 응답 객체를 처리할 수 있다
 - 미들웨어는 HTTP 요청과 응답을 처리하거나 다음 미들웨어를 실행하는 동작을 하는 함수이다

2. 미들웨어 함수
 - req 파라미터는 HTTP 요청에 대한 객체이다
 - res 파라미터는 HTTP 응답에 대한 객체이다
 - err 파라미터가 있는 것은 오류처리 미들웨어이다
 - next 함수에 인자를 전달하면 오류처리 미들웨어가 실행된다

3. 미들웨어 종류

오류처리 미들웨어
 - 일반적으로 가장 마지막에 위치한다
 - err, req, res, next 네가지 인자를 갖는다
 - next에 인자를 전달하여 실행한다

어플리케이션 미들웨어
 - use나 http method 함수를 사용하여 미들웨어를 연결할 수 있음
 - 미들웨어를 모든 요청에 공통적으로 적용하기 위한 방법
 - HTTP 요청이 들어온 순간부터 적용된 순서대로 동작 함

라우터 미들웨어
 - router 객체에 미들웨어가 적용되느느 것 외에는 어플리케이션 미들웨어와 사용방법은 동일
 - 특정 경로의 라우팅에만 미들웨어를 적용하기 위한 방법
 - app 객체에 라우터가 적용된 이후로 순서대로 동작함

4. REST API 가이드
 - HTTP Method와 URL을 합쳐 API의 동작을 정의한다
 - 자원은 계층적으로 표현한다
 - REST API의 URL 자원은 복수형으로 표현하는 것이 기본이며,
   특정 자원에 대한 접근은 복수형 + 아이디 를 통해 접근합니다

5. JSON
 - JSON의 JS에서 Object를 표현하는 표현식이다
 - 웹 API에서 데이터를 전송할 때 주로 사용한다
 - JSON은 통신 오버헤드가 매우 작은 표현 방법이다

--------------------------------------
https://github.com/kyubums/rest-api-example
--------------------------------------

6. Middleware
 - Express.js 동작의 핵심으로, HTTP 요청과 응답 사이에서 단계별 동작을 수행하는 함수

7. MVC 패턴
 - 웹 서비스의 대표적인 프로젝트 구성 패턴으로 프로젝트의 기능들
 Model View Controller







