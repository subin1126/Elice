1. 웹 서비스의 동작방식 설명
 - 웹 서비스는 HTTP 요청과 응답의 반복으로 이루어짐
 - HTTP 요청은 사용자가 어떤 데이터를 필요로 하는지 알리는 역할을 함
 - HTTP 응답은 HTTP 요청에 해당하는 적절한 데이터를 사용자에게
   전달하기 때문에 서버의 상태 외에도 다양한 데이터를 얻을 수 있다

2. 백엔드와 프론트엔드
 - 프론트엔드는 HTTP 요청을 송신하고 HTTP 응답을 수신함
 - 프론트엔드는 사용자에게 보여지는 영역을 담당함
 - 백엔드는 HTTP 요청을 수신하고 HTTP 응답을 송신함
 - HTML과 CSS는 사용자에게 보여지는 영역으로 프론트엔드의 담당 영역

3. 정적 웹과 동적 웹
 - 정적 웹은 단방향 통신으로, link를 통한 페이지 이동이 가능하다
 - 동적 웹은 양방향 통신으로 사용자와 상호작용을 한다
 - 프론트엔드와 백엔드가 유기적으로 통신하는 것은 동적 웹이다
 - 단일 html 파일로 동작하는 것은 정적 웹에 대한 설명이다
   동적 웹은 프론트엔드와 백엔드가 유기적으로 통신하기 위해 여러가지 프로그램 언어를 사용한다

4. CSR (Client Side Rendering)
 - 백엔드와 API로 통신하여 데이터를 주고받음
 - 페이지의 내용이 화면보다 늦게 표시됨
 - 프로젝트의 구성이 복잡하고 개발 사이즈가 커짐
 - CSR의 구성은 페이지 리소스를 프론트엔드가 가지고 페이지를 표현한다

5. SSR (Server-Side Rendering)
 - 사이트의 변경되는 부분을 대부분 백엔드에서 처리함
 - html 파일을 대부분 백엔드에서 작성된 채로 프론트엔드에 전달함
 - csr에 비해 페이지 로딩이 느려 보임
 - ssr은 페이지를 이동할 때 html을 새로 구성하기 때문에 화면이 깜빡이게 된다

6. 웹 프레임워크
 - 웹 서비스에 필요한 기능을 제공해주는 다양한 도구들의 모음
 - http 요청과 처리, 라우팅 기능 등을 제공
 - 웹 프로임워크는 웹 서비스를 구현하는데 필요한 도구를 제공하지만,
   자동으로 웹 사이트를 생성해주지는 않는다
   몇 웹 프레임워크는 기본적인 웹사이트 구조를 제공해주지만,
   이것이 웹 프레임 워크의 특징이라고 할 수 없다

7. Express.js의 구성요소 설명
 - app 객체는 Express.js의 핵심으로 모든 동작의 시작점이다
 - Request 객체는 HTTP 요청을 처리한다
 - Response 객체는 HTTP 응답을 처리한다
 - Express.js에서는 app 객체와 router 객체 두가지를 사용하여 라우팅을 구현할 수 있다

---------------------------------------------------------
Request	설명
req.param	URL 표현 중 /path/:id 에서 :id 를 req.param.id 로 사용할 수 있음
req.query	URL 표현 중 /path?page=2 에서 page 부분을 req.query.page 로 사용할 수 있음
req.body	일반적으로 POST 요청의 요청 데이터를 담고 있음 req.body 에 요청 데이터가 저장되어 들어옴
req.get('')	HTTP Request 의 헤더 값을 가져올 수 있음 req.get(‘Authorization’) 등으로 값을 가져옴
Response	설명
res.send()	text 형식의 HTTP 응답을 전송함
res.json()	json 형식의 HTTP 응답을 전송함
res.render()	HTML Template 을 사용하여 화면을 전송함
res.set()	HTTP 응답의 헤더를 설정함
res.status()	HTTP 응답의 상태 값을 설정함

----------------------------------------------------------





